{"version":3,"sources":["adf.module.js","angular-dashboard-framework.tpl.js","widgets/Weather/widget.js","widgets/PdfView/widget.js","widgets/Clock/widget.js","widgets/LinkList/widget.js","services/widget.service.js","services/adf-utils.service.js","services/adf-structure-preview.service.js","services/adf-dashboard.service.js","directives/adf-widget.directive.js","angular-dashboard-framework-tpls.min.js","directives/adf-widget-content.directive.js","directives/adf-structure-preview.directive.js","directives/adf-dashboard.directive.js","directives/adf-dashboard-row.directive.js","directives/adf-dashboard-column.directive.js","filters/adf-order-by-object-key.filter.js","base/adf.base.js","dashboard.provider.js","adf.locale.module.js","adf.locale.constants.js","angular-dashboard-framework-tpls.js"],"names":["window","undefined","angular","module","value","run","$templateCache","put","config","$sceDelegateProvider","resourceUrlWhitelist","dashboardProvider","widget","title","description","templateUrl","controller","reload","resolve","data","weatcherService","location","get","edit","service","$q","$http","weatherServiceUrl","weatherApiKey","$sce","deferred","defer","url","then","res","cod","reject","promise","$scope","directive","restrict","scope","src","template","link","element","attrs","settings","width","height","file","ext","substring","lastIndexOf","gdvId","$id","show","getUrl","test","trustAsResourceUrl","category","getPdfs","pdfs","addLink","push","removeLink","index","splice","$","fn","gdocsViewer","options","extend","this","each","attr","after","id","encodeURIComponent","jQuery","controllerAs","timePattern","datePattern","$interval","setDateAndTime","d","moment","clock","time","format","date","$on","cancel","getLinks","links","factory","dashboard","parseUrl","parsedUrl","indexOf","replace","widgetsPath","exposed","getTemplate","tpl","getTrustedResourceUrl","response","stringToBoolean","string","isString","toLowerCase","Boolean","split","object","size","arr","i","forEach","key","adjustRowHeight","container","rows","length","row","style","columns","column","$log","$rootScope","_copyWidgets","source","target","widgets","w","shift","_fillStructure","root","counter","isDefined","isUndefined","_readColumns","col","hasOwnProperty","changeStructure","model","structure","copy","createConfiguration","type","cfg","_findFirstWidgetColumn","isArray","error","j","addNewWidgetToModel","name","unshift","$broadcast","isEditModeImmediate","immediate","createCategories","categories","_tests","$injector","$uibModal","adfTemplatePath","preLink","definition","translate","titleTemplateUrl","editTemplateUrl","frameless","styleClass","wid","fromJson","widgetState","isCollapsed","collapsed","warn","debug","postLink","$element","deleteWidget","remove","enableConfirmDelete","deleteScope","$new","deleteTemplateUrl","opts","windowClass","backdrop","instance","open","closeDialog","close","$destroy","deleteDialog","createApplyPromise","result","when","editScope","adfEditTemplatePath","saveDialog","validationError","applyFn","apply","locals","invoke","err","event","args","collapseExpandStatus","idEquals","widgetClasses","classes","editMode","openFullScreen","fullScreenScope","modalSize","$inject","transclude","customWidgetTemplatePath","adfModel","compile","pre","post","widgetService","$compile","$controller","renderError","msg","html","messageTemplate","compileWidget","currentScope","content","newScope","renderWidget","loadingTemplate","templateScope","base","resolvers","$tpl","all","resolveAs","templateCtrl","children","contents","reason","adfStructurePreviewService","preview","selected","$timeout","adfDashboardService","adfUtilsService","_openEditMode","getNewModalScope","widgetFilter","structureName","$watch","oldVal","newVal","adfWidgetFilter","structures","editClass","toggleEditMode","continuousEditMode","modelCopy","collapseAll","cancelEditMode","editDashboardDialog","editDashboardScope","info","addWidgetDialog","addScope","isFunction","adfAddTemplatePath","addTemplateUrl","addWidget","$attr","editable","maximizable","collapsible","columnTemplate","cloned","append","rowTemplate","moveWidgetInColumn","evt","$apply","newIndex","oldIndex","findWidget","findColumn","r","c","cid","getId","el","getAttribute","addWidgetToColumn","targetColumn","from","sourceColumn","item","removeWidgetFromColumn","applySortable","sortable","Sortable","create","group","handle","ghostClass","animation","onAdd","onRemove","onUpdate","on","destroy","filter","$filter","array","objectKey","provider","adfLocale","getLocales","locales","getActiveLocale","activeLocale","label","translation","defaultApplyFunction","defaultLocale","frameworkLocales","path","templatePath","setLocale","locale","Error","addLocale","translations","isObject","$get","Date","getTime","other","toString","constant","en-GB","ADF_COMMON_CLOSE","ADF_COMMON_DELETE","ADF_COMMON_TITLE","ADF_COMMON_CANCEL","ADF_COMMON_APPLY","ADF_COMMON_EDIT_DASHBOARD","ADF_EDIT_DASHBOARD_STRUCTURE_LABEL","ADF_DASHBOARD_TITLE_TOOLTIP_ADD","ADF_DASHBOARD_TITLE_TOOLTIP_SAVE","ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE","ADF_DASHBOARD_TITLE_TOOLTIP_UNDO","ADF_WIDGET_ADD_HEADER","ADF_WIDGET_DELETE_CONFIRM_MESSAGE","ADF_WIDGET_TOOLTIP_REFRESH","ADF_WIDGET_TOOLTIP_MOVE","ADF_WIDGET_TOOLTIP_COLLAPSE","ADF_WIDGET_TOOLTIP_EXPAND","ADF_WIDGET_TOOLTIP_EDIT","ADF_WIDGET_TOOLTIP_FULLSCREEN","ADF_WIDGET_TOOLTIP_REMOVE","pt-BR"],"mappings":"CAAA,SAAAA,EAAAC,GAAA,YA2BAC,SAAAC,OAAA,OAAA,eAAA,aAAA,iBACAC,MAAA,kBAAA,qBACAA,MAAA,cAAA,8HACAA,MAAA,iBAAA,0IACAA,MAAA,aAAA,mBC9BAF,QAAAC,OAAA,OAAAE,KAAA,iBAAA,SAAAC,GAAAA,EAAAC,IAAA,yCAAA,8RACAD,EAAAC,IAAA,uCAAA,mxCACAD,EAAAC,IAAA,sCAAA,uEACAD,EAAAC,IAAA,wCAAA,i2BACAD,EAAAC,IAAA,kCAAA,sUACAD,EAAAC,IAAA,0CAAA,2KACAD,EAAAC,IAAA,mCAAA,qsCACAD,EAAAC,IAAA,sCAAA,uoBACAD,EAAAC,IAAA,oCAAA,2gCACAD,EAAAC,IAAA,0CAAA,4oBACAD,EAAAC,IAAA,qCAAA,oxCACAD,EAAAC,IAAA,+BAAA,2dACAD,EAAAC,IAAA,8CAAA,i8BACAD,EAAAC,IAAA,8CAAA,6KACAD,EAAAC,IAAA,2CAAA,ieACAD,EAAAC,IAAA,2CAAA,kHACAD,EAAAC,IAAA,6CAAA,yvBACAD,EAAAC,IAAA,6CAAA,4PACAD,EAAAC,IAAA,6CAAA,wMCnBAD,EAAAC,IAAA,6CAAA,gfAGAL,QAAAC,OAAA,sBAAA,iBACAC,MAAA,gBAAA,oCACAA,MAAA,oBAAA,0EACAI,QAAA,uBAAA,SAAAC,GACAA,EAAAC,sBAEA,OAEA,sCAGAF,QAAA,oBAAA,SAAAG,GACAA,EACAC,OAAA,WACAC,MAAA,mBACAC,YAAA,sDACAC,YAAA,6CACAC,WAAA,cACAC,QAAA,EACAC,SACAC,MAAA,kBAAA,SAAA,SAAAC,EAAAZ,GACA,GAAAA,EAAAa,SACA,MAAAD,GAAAE,IAAAd,EAAAa,aAIAE,MACAR,YAAA,mDAIAS,QAAA,mBAAA,KAAA,QAAA,oBAAA,gBAAA,OAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,OACAP,IAAA,SAAAD,GACA,GAAAS,GAAAL,EAAAM,QACAC,EAAA,WACA,MAAAL,GAAAN,EAAA,UAAAO,EAaA,OAXAF,GAAAJ,IAAAU,KAAAC,KACA,SAAAC,GACAA,EAAAf,MAAA,MAAAe,EAAAf,KAAAgB,IACAL,EAAAZ,QAAAgB,EAAAf,MAEAW,EAAAM,UAGA,WACAN,EAAAM,WAEAN,EAAAO,aAIArB,WAAA,eAAA,SAAA,OAAA,SAAAsB,EAAAnB,GACAmB,EAAAnB,KAAAA,KCtDAjB,QAAAC,OAAA,wBAAA,iBACAoC,UAAA,aAAA,OAAA,SAAAV,GACA,OACAW,SAAA,KACAC,OACAC,IAAA,KAEAC,SAAA,2JACAC,KAAA,SAAAH,EAAAI,EAAAC,GACAL,EAAAM,UACAC,MAAA,MACAC,OAAA,MAGA,IAAAC,GAAAT,EAAAC,IACAS,EAAAD,EAAAE,UAAAF,EAAAG,YAAA,KAAA,EACAZ,GAAAa,MAAAb,EAAAc,IACAd,EAAAe,MAAA,EAEAf,EAAAgB,OAAA,WAIA,MAHA,iDAAAC,KAAAP,KACAV,EAAAe,MAAA,GAEA3B,EAAA8B,mBAAA,6DAAAlB,EAAAC,WAOAlC,QAAA,oBAAA,SAAAG,GACAA,EACAC,OAAA,aACAC,MAAA,MACAC,YAAA,cACA8C,SAAA,aACA3C,QAAA,EACAF,YAAA,6CACAQ,MACAR,YAAA,6CACAC,WAAA,wBAGAA,WAAA,mBAAA,SAAA,SAAAsB,GAEA,QAAAuB,KAIA,MAHAvB,GAAA9B,OAAAsD,OACAxB,EAAA9B,OAAAsD,SAEAxB,EAAA9B,OAAAsD,KAGAxB,EAAAyB,QAAA,WACAF,IAAAG,UAGA1B,EAAA2B,WAAA,SAAAC,GACAL,IAAAM,OAAAD,EAAA,OAUA,SAAAE,GACAA,EAAAC,GAAAC,YAAA,SAAAC,GAEA,GAAAxB,IACAC,MAAA,MACAC,OAAA,MAOA,OAJAsB,IACAH,EAAAI,OAAAzB,EAAAwB,GAGAE,KAAAC,KAAA,WACA,GAAAxB,GAAAkB,EAAAK,MAAAE,KAAA,QACAxB,EAAAD,EAAAE,UAAAF,EAAAG,YAAA,KAAA,EAEA,0CAAAK,KAAAP,IACAiB,EAAAK,MAAAG,MAAA,WACA,GAAAC,GAAAT,EAAAK,MAAAE,KAAA,MACArB,EAAA,mBAAAuB,IAAAA,KAAA,EAAAA,EAAA,eAAA,EACA,OAAA,YAAAvB,EAAA,sFAAAwB,mBAAA5B,GAAA,YAAAH,EAAAC,MAAA,aAAAD,EAAAE,OAAA,gDC1FA8B,QACA7E,QAAAC,OAAA,oBAAA,iBACAK,QAAA,oBAAA,SAAAG,GACAA,EACAC,OAAA,SACAC,MAAA,UACAC,YAAA,kBACA8C,SAAA,WACA7C,YAAA,2CACAC,WAAA,kBACAgE,aAAA,QACAxE,QACAyE,YAAA,WACAC,YAAA,cAEA3D,MACAR,YAAA,iDAIAC,WAAA,mBAAA,SAAA,YAAA,SAAA,SAAAsB,EAAA6C,EAAA3E,GAGA,QAAA4E,KACA,GAAAC,GAAA,GAAAC,OACAC,GAAAC,KAAAH,EAAAI,OAAAjF,EAAAyE,aACAM,EAAAG,KAAAL,EAAAI,OAAAjF,EAAA0E,aALA,GAAAK,GAAAd,IAQAW,IAGA,IAAA/C,GAAA8C,EAAAC,EAAA,IAGA9C,GAAAqD,IAAA,WAAA,WACAR,EAAAS,OAAAvD,QCjCAnC,QAAAC,OAAA,uBAAA,iBACAK,QAAA,oBAAA,SAAAG,GACAA,EACAC,OAAA,YACAC,MAAA,QACAC,YAAA,wBACA8C,SAAA,WACA7C,YAAA,8CACAQ,MACAR,YAAA,8CACAC,WAAA,yBAGAA,WAAA,oBAAA,SAAA,SAAAsB,GAEA,QAAAuD,KAIA,MAHAvD,GAAA9B,OAAAsF,QACAxD,EAAA9B,OAAAsF,UAEAxD,EAAA9B,OAAAsF,MAGAxD,EAAAyB,QAAA,WACA8B,IAAA7B,UAGA1B,EAAA2B,WAAA,SAAAC,GACA2B,IAAA1B,OAAAD,EAAA,OCAAhE,QAAAC,OAAA,OACA4F,QAAA,iBAAA,QAAA,KAAA,OAAA,iBAAA,YAAA,SAAArE,EAAAD,EAAAI,EAAAvB,EAAA0F,GAGA,QAAAC,GAAAjE,GACA,GAAAkE,GAAAlE,CAQA,OAPAA,GAAAmE,QAAA,kBAAA,IACAD,EAAAlE,EAAAoE,QAAA,gBAAAJ,EAAAK,aACAD,QAAA,KAAA,KACA,IAAAF,EAAAC,QAAA,OACAD,EAAAA,EAAA9C,UAAA,KAGA8C,EAGA,GAAAI,KAgCA,OA9BAA,GAAAC,YAAA,SAAA3F,GACA,GAAAkB,GAAAL,EAAAM,OAEA,IAAAnB,EAAA+B,SACAb,EAAAZ,QAAAN,EAAA+B,cACA,IAAA/B,EAAAG,YAAA,CAEA,GAAAyF,GAAAlG,EAAAgB,IAAAV,EAAAG,YACA,IAAAyF,EACA1E,EAAAZ,QAAAsF,OACA,CACA,GAAAxE,GAAAH,EAAA4E,sBAAAR,EAAArF,EAAAG,aACAW,GAAAJ,IAAAU,GACAC,KAAA,SAAAyE,GACA,MAAAA,GAAAvF,OAEAc,KAAA,SAAAd,GAEAb,EAAAC,IAAAK,EAAAG,YAAAI,GACAW,EAAAZ,QAAAC,KAPAO,SASA,WACAI,EAAAM,OAAA,8BAKA,MAAAN,GAAAO,SAGAiE,KCrDApG,QAAAC,OAAA,OACA4F,QAAA,kBAAA,WASA,QAAAY,GAAAC,GACA,OAAA1G,QAAA2G,SAAAD,GAAAA,EAAAE,cAAA,MACA,IAAA,OAAA,IAAA,MAAA,IAAA,IAAA,OAAA,CACA,KAAA,QAAA,IAAA,KAAA,IAAA,IAAA,IAAA,MAAA,OAAA,CACA,SAAA,MAAAC,SAAAH,IAYA,QAAAI,GAAAC,EAAAC,GACA,GAAAC,MACAC,EAAA,CAQA,OAPAlH,SAAAmH,QAAAJ,EAAA,SAAA7G,EAAAkH,GACA,GAAApD,GAAAkD,IAAAF,CACAC,GAAAjD,KACAiD,EAAAjD,OAEAiD,EAAAjD,GAAAoD,GAAAlH,IAEA+G,EAhCA,GAAA3F,IACAmF,gBAAAA,EACAK,MAAAA,EAEA,OAAAxF,KCRAtB,QAAAC,OAAA,OACA4F,QAAA,6BAAA,WAQA,QAAAwB,GAAAC,GACA,GAAAA,EAAAC,MAAAD,EAAAC,KAAAC,OAAA,EAAA,CACA,GAAAzE,GAAA,IAAAuE,EAAAC,KAAAC,MACAxH,SAAAmH,QAAAG,EAAAC,KAAA,SAAAE,GACAA,EAAAC,OACA3E,OAAAA,EAAA,KAGA0E,EAAAE,SACA3H,QAAAmH,QAAAM,EAAAE,QAAA,SAAAC,GACAP,EAAAO,QAfA,GAAAtG,IACA+F,gBAAAA,EAEA,OAAA/F,KCPAtB,QAAAC,OAAA,OACA4F,QAAA,uBAAA,OAAA,YAAA,aAAA,SAAAgC,EAAA/B,EAAAgC,GAkBA,QAAAC,GAAAC,EAAAC,GACA,GAAAD,EAAAE,SAAAF,EAAAE,QAAAV,OAAA,EAEA,IADA,GAAAW,GAAAH,EAAAE,QAAAE,QACAD,GACAF,EAAAC,QAAApE,KAAAqE,GACAA,EAAAH,EAAAE,QAAAE,QAWA,QAAAC,GAAAC,EAAAX,EAAAY,GA0BA,MAzBAA,GAAAA,GAAA,EAEAvI,QAAAwI,UAAAF,EAAAf,OACAvH,QAAAmH,QAAAmB,EAAAf,KAAA,SAAAE,GACAzH,QAAAmH,QAAAM,EAAAE,QAAA,SAAAC,GAGAA,EAAAM,UACAN,EAAAM,YAIAlI,QAAAwI,UAAAb,EAAAY,KAEAvI,QAAAyI,YAAAb,EAAAL,QACAQ,EAAAJ,EAAAY,GAAAX,GACAW,KAKAA,EAAAF,EAAAT,EAAAD,EAAAY,OAIAA,EAQA,QAAAG,GAAAJ,EAAAX,GAeA,MAdAA,GAAAA,MAEA3H,QAAAwI,UAAAF,EAAAf,OACAvH,QAAAmH,QAAAmB,EAAAf,KAAA,SAAAE,GACAzH,QAAAmH,QAAAM,EAAAE,QAAA,SAAAgB,GACAA,EAAAC,eAAA,SACAjB,EAAA7D,KAAA6E,GAGAD,EAAAC,EAAAhB,OAKAA,EAGA,QAAAkB,GAAAC,EAAAC,GACA,GAAApB,GAAAe,EAAAI,GACAP,EAAA,CAIA,KAFAO,EAAAvB,KAAAvH,QAAAgJ,KAAAD,EAAAxB,MAEAgB,EAAAZ,EAAAH,QACAe,EAAAF,EAAAS,EAAAnB,EAAAY,GAIA,QAAAU,GAAAC,GACA,GAAAC,MACA7I,EAAAwF,EAAAoC,QAAAgB,GAAA5I,MAIA,OAHAA,KACA6I,EAAAnJ,QAAAgJ,KAAA1I,IAEA6I,EAQA,QAAAC,GAAAN,GACA,GAAAlB,GAAA,IACA,KAAA5H,QAAAqJ,QAAAP,EAAAvB,MAEA,MADAM,GAAAyB,MAAA,gCACA,IAEA,KAAA,GAAApC,GAAA,EAAAA,EAAA4B,EAAAvB,KAAAC,OAAAN,IAAA,CACA,GAAAO,GAAAqB,EAAAvB,KAAAL,EACA,IAAAlH,QAAAqJ,QAAA5B,EAAAE,SACA,IAAA,GAAA4B,GAAA,EAAAA,EAAA9B,EAAAE,QAAAH,OAAA+B,IAAA,CACA,GAAAZ,GAAAlB,EAAAE,QAAA4B,EACA,KAAAZ,EAAApB,KAAA,CACAK,EAAAe,CACA,QAIA,GAAAf,EACA,MAGA,MAAAA,GAUA,QAAA4B,GAAAV,EAAApI,EAAA+I,GACA,GAAAX,EAAA,CACA,GAAAlB,GAAAwB,EAAAN,EACAlB,IACAA,EAAAM,UACAN,EAAAM,YAEAN,EAAAM,QAAAwB,QAAAhJ,GAEAoH,EAAA6B,WAAA,iBAAAF,EAAAX,EAAApI,IAEAmH,EAAAyB,MAAA,0CAGAzB,GAAAyB,MAAA,sBASA,QAAAM,GAAAV,GACA,GAAAxI,GAAAoF,EAAAoC,QAAAgB,EACA,OAAAxI,IAAAA,EAAAW,MAAAX,EAAAW,KAAAwI,UAUA,QAAAC,GAAA5B,GACA,GAAA6B,KAaA,OAZA/J,SAAAmH,QAAAe,EAAA,SAAAxH,EAAA0G,GACA,GAAA1D,GAAAhD,EAAAgD,QAEAA,KACAA,EAAA,iBAGA1D,QAAAyI,YAAAsB,EAAArG,MACAqG,EAAArG,IAAAwE,aAEA6B,EAAArG,GAAAwE,QAAAd,GAAA1G,IAEAqJ,EA5LA,GAAAzI,IACAuH,gBAAAA,EACAI,oBAAAA,EACAO,oBAAAA,EACAI,oBAAAA,EACAE,iBAAAA,EAIAE,QACAtB,aAAAA,GAGA,OAAApH,MCfAtB,QAAAC,OAAA,OACAoC,UAAA,aAAA,YAAA,KAAA,OAAA,YAAA,aAAA,YAAA,kBAAA,SAAA4H,EAAA1I,EAAAsG,EAAAqC,EAAApC,EAAAhC,EAAAqE,GA6BA,QAAAC,GAAAhI,GACA,GAAAiI,GAAAjI,EAAAiI,UAKA,IAFAjI,EAAAkI,UAAAxE,EAAAwE,UAEAD,EAAA,CACA,GAAAlC,GAAArC,EAAAoC,QAAAmC,EAAAnB,KACA,IAAAf,EAAA,CAEAkC,EAAA1J,QACA0J,EAAA1J,MAAAwH,EAAAxH,OAGA0J,EAAAE,mBACAF,EAAAE,iBAAAJ,EAAA,oBACAhC,EAAAoC,mBACAF,EAAAE,iBAAApC,EAAAoC,mBAIAF,EAAAG,kBACAH,EAAAG,gBAAAL,EAAA,mBACAhC,EAAAqC,kBACAH,EAAAG,gBAAArC,EAAAqC,kBAIAH,EAAAE,mBACAF,EAAAI,UAAAtC,EAAAsC,WAGAJ,EAAAK,aACAL,EAAAK,WAAAvC,EAAAuC,YAIAL,EAAAM,MACAN,EAAAM,IAAA7E,EAAAnB,MAIAvC,EAAA1B,OAAAV,QAAAgJ,KAAAb,EAGA,IAAA7H,GAAA+J,EAAA/J,MACAA,GACAN,QAAA2G,SAAArG,KACAA,EAAAN,QAAA4K,SAAAtK,IAGAA,KAIA8B,EAAA9B,OAAAA,EAGA8B,EAAAyI,cACAzI,EAAAyI,eACAzI,EAAAyI,YAAAC,YAAA3C,EAAA4C,aAAA,GAAA5C,EAAA4C,eAIAlD,GAAAmD,KAAA,yBAAAX,EAAAnB,UAGArB,GAAAoD,MAAA,yDAIA,QAAAC,GAAA9I,EAAA+I,GACA,GAAAd,GAAAjI,EAAAiI,UACA,IAAAA,EAAA,CAGA,GAAAe,GAAA,WACA,GAAAxD,GAAAxF,EAAAuG,GACA,IAAAf,EAAA,CACA,GAAA5D,GAAA4D,EAAAM,QAAAjC,QAAAoE,EACArG,IAAA,GACA4D,EAAAM,QAAAjE,OAAAD,EAAA,GAGAmH,EAAAE,SACAvD,EAAA6B,WAAA,6BAAAU,GAGAjI,GAAAiJ,OAAA,WACA,GAAAjJ,EAAAiC,QAAAiH,oBAAA,CACA,GAAAC,GAAAnJ,EAAAoJ,MACAD,GAAAjB,UAAAxE,EAAAwE,SAEA,IAAAmB,GAAAtB,EAAA,oBACAE,GAAAoB,oBACAA,EAAApB,EAAAoB,kBAEA,IAAAC,IACAnJ,MAAAgJ,EACA1K,YAAA4K,EACAE,YAAA,0BACAC,SAAA,UAEAC,EAAA3B,EAAA4B,KAAAJ,EAEAH,GAAAQ,YAAA,WACAF,EAAAG,QACAT,EAAAU,YAEAV,EAAAW,aAAA,WACAd,IACAG,EAAAQ,mBAGAX,MAKAhJ,EAAArB,OAAA,WACAqB,EAAAuH,WAAA,iBAIAvH,EAAAf,KAAA,WAyBA,QAAA8K,GAAAC,GACA,GAAAjK,EACA,IAAA,iBAAAiK,GAAA,CACA,GAAAxK,GAAAL,EAAAM,OACAuK,GACAxK,EAAAZ,UAEAY,EAAAM,SAEAC,EAAAP,EAAAO,YAEAA,GAAAZ,EAAA8K,KAAAD,EAEA,OAAAjK,GArCA,GAAAmK,GAAAlK,EAAAoJ,MACAc,GAAAhC,UAAAxE,EAAAwE,UACAgC,EAAAjC,WAAArK,QAAAgJ,KAAAqB,EAEA,IAAAkC,GAAApC,EAAA,kBACAE,GAAAG,kBACA+B,EAAAlC,EAAAG,gBAGA,IAAAkB,IACAnJ,MAAA+J,EACAzL,YAAA0L,EACAZ,YAAA,wBACAC,SAAA,UAGAC,EAAA3B,EAAA4B,KAAAJ,EAEAY,GAAAP,YAAA,WACAF,EAAAG,QACAM,EAAAL,YAoBAK,EAAAE,WAAA,WAEAF,EAAAG,gBAAA,IAGA,IAKAC,GALAhM,EAAA0B,EAAA1B,MAOAgM,GADAhM,EAAAW,KACAX,EAAAW,KAAAsL,MAEA,WACA,OAAA,EAKA,IAAAC,IACAlM,OAAAA,EACA2J,WAAAiC,EAAAjC,WACA/J,OAAAgM,EAAAjC,WAAA/J,QAIA8L,EAAAnC,EAAA4C,OAAAH,EAAAA,EAAAE,EACAT,GAAAC,GAAArK,KAAA,WACAsI,EAAA1J,MAAA2L,EAAAjC,WAAA1J,MACAX,QAAAsE,OAAA+F,EAAA/J,OAAAgM,EAAAjC,WAAA/J,QACAI,EAAAW,MAAAX,EAAAW,KAAAN,QAEAqB,EAAAuH,WAAA,uBAEA2C,EAAAP,eACA,SAAAe,GACAA,EACAR,EAAAG,gBAAAK,EAEAR,EAAAG,gBAAA,0CAOA5E,GAAAoD,MAAA,oBAIA,QAAAnK,GAAAsB,GAEAA,EAAAqD,IAAA,6BAAA,SAAAsH,EAAAC,GACA5K,EAAAyI,YAAAC,YAAAkC,EAAAC,uBAGA7K,EAAAqD,IAAA,yBAAA,SAAAsH,EAAArM,GACAoF,EAAAoH,SAAA9K,EAAAiI,WAAAM,IAAAjK,EAAAiK,MACAvI,EAAAf,SAIAe,EAAA+K,cAAA,SAAAhF,EAAAkC,GACA,GAAA+C,GAAA/C,EAAAK,YAAA,EAMA,OAHAvC,IAAAA,EAAAsC,YAAArI,EAAAiL,WACAD,GAAA,wBAEAA,GAGAhL,EAAAkL,eAAA,WACA,GAAAjD,GAAAjI,EAAAiI,WACAkD,EAAAnL,EAAAoJ,OACAE,GACAnJ,MAAAgL,EACA1M,YAAAsJ,EAAA,yBACAnD,KAAAqD,EAAAmD,WAAA,KACA5B,SAAA,SACAD,YAAAtB,EAAA,WAAA,oCAAA,mBAGAwB,EAAA3B,EAAA4B,KAAAJ,EACA6B,GAAAxB,YAAA,WACAF,EAAAG,QACAuB,EAAAtB,aAvRA,MCkrBInL,GAAW2M,SAAW,WDjrB1BvH,SAAA,EACA5D,SAAA,KACAoL,YAAA,EACA7M,YAAAiF,EAAA6H,yBAAA7H,EAAA6H,yBAAAxD,EAAA,cACA5H,OACAqL,SAAA,IACAvD,WAAA,IACA1B,IAAA,UACA0E,SAAA,IACAhJ,QAAA,IACAwG,YAAA,KAEA/J,WAAAA,EACA+M,QAAA,WAMA,OACAC,IAAA1D,EACA2D,KAAA7C,QEzBAlL,QAAAC,OAAA,OACAoC,UAAA,oBAAA,OAAA,KAAA,gBAAA,WAAA,cAAA,YAAA,YAAA,SAAAwF,EAAAtG,EAAAyM,EAAAC,EAAAC,EAAAjE,EAAAnE,GAcA,QAAAqI,GAAAhD,EAAAiD,GACAvG,EAAAmD,KAAAoD,GACAjD,EAAAkD,KAAAvI,EAAAwI,gBAAApI,QAAA,MAAAkI,IAGA,QAAAG,GAAAnM,EAAA+I,EAAAqD,GACA,GAAA1F,GAAA1G,EAAA0G,MACA2F,EAAArM,EAAAqM,QAEAC,EAAAF,CACA,IAAA1F,EAEA,GAAA2F,EAIAC,EAAAC,EAAAvM,EAAA+I,EAAAqD,EAAA1F,EAAA2F,OAJA,CACA,GAAAL,GAAA,qEACAD,GAAAhD,EAAAiD,OAHAD,GAAAhD,EAAA,qBAOA,OAAAuD,GAGA,QAAAC,GAAAvM,EAAA+I,EAAAqD,EAAA1F,EAAA2F,GAEAtD,EAAAkD,KAAAvI,EAAA8I,gBAGA,IAAAC,GAAAzM,EAAAoJ,MAGA1C,GAAAxI,SACAwI,EAAAxI,WAGAuO,EAAAvO,OAAAwI,EAAAxI,MAGA,IAAAwO,IACA1M,OAAAyM,EACAnO,OAAAoI,EACAxI,OAAAwI,EAAAxI,QAIAyO,IA8CA,OA7CAA,GAAAC,KAAAhB,EAAA3H,YAAAoI,GACAA,EAAAzN,SACAhB,QAAAmH,QAAAsH,EAAAzN,QAAA,SAAAmB,EAAAiF,GACApH,QAAA2G,SAAAxE,GACA4M,EAAA3H,GAAA6C,EAAA7I,IAAAe,GAEA4M,EAAA3H,GAAA6C,EAAA4C,OAAA1K,EAAAA,EAAA2M,KAMAvN,EAAA0N,IAAAF,GAAAhN,KAAA,SAAA6K,GACA5M,QAAAsE,OAAAsI,EAAAkC,GAGAL,EAAAS,YACAL,EAAAJ,EAAAS,WAAAtC,EAIA,IAAAnK,GAAAmK,EAAAoC,IAEA,IADA7D,EAAAkD,KAAA5L,GACAgM,EAAA3N,WAAA,CACA,GAAAqO,GAAAjB,EAAAO,EAAA3N,WAAA8L,EACA6B,GAAA3J,eACA+J,EAAAJ,EAAA3J,cAAAqK,GAEAhE,EAAAiE,WAAAnO,KAAA,0BAAAkO,GAEAlB,EAAA9C,EAAAkE,YAAAR,IACA,SAAAS,GAEA,GAAAlB,GAAA,gCACAkB,KACAlB,GAAA,KAAAkB,GAEAnB,EAAAhD,EAAAiD,KAIAI,GACAA,EAAAvC,WAGA4C,EAGA,QAAAnM,GAAAN,EAAA+I,GACA,GAAAqD,GAAAD,EAAAnM,EAAA+I,EAAA,KACA/I,GAAAqD,IAAA,sBAAA,WACA+I,EAAAD,EAAAnM,EAAA+I,EAAAqD,KAEApM,EAAAqD,IAAA,eAAA,WACA+I,EAAAD,EAAAnM,EAAA+I,EAAAqD,KA9GA,OACAtI,SAAA,EACA5D,SAAA,KACAoL,YAAA,EACAnL,OACAqL,SAAA,IACA9E,MAAA,IACA2F,QAAA,KAEA/L,KAAAA,MCXA1C,QAAAC,OAAA,OACAoC,UAAA,uBAAA,kBAAA,6BAAA,SAAA8H,EAAAoF,GAcA,QAAA7M,GAAAN,GACA,GAAA2G,GAAA/I,QAAAgJ,KAAA5G,EAAA2G,UACAwG,GAAAlI,gBAAA0B,GACA3G,EAAAoN,QAAAzG,EAfA,OACAzG,SAAA,IACA4D,SAAA,EACA3D,OACAkH,KAAA,IACAV,UAAA,IACA0G,SAAA,KAEA5O,YAAAsJ,EAAA,yBACAzH,KAAAA,MCUA1C,QAAAC,OAAA,OACAoC,UAAA,gBAAA,aAAA,OAAA,WAAA,YAAA,YAAA,kBAAA,sBAAA,kBAAA,SAAAyF,EAAAD,EAAA6H,EAAAxF,EAAApE,EAAAqE,EAAAwF,EAAAC,GA8BA,QAAAC,GAAAzN,EAAA1B,GAEAgP,EAAA,WACAtN,EAAAuH,WAAA,yBAAAjJ,IACA,KAQA,QAAAI,GAAAsB,GAiDA,QAAA0N,KACA,GAAAvN,GAAAH,EAAAoJ,MAGA,OADAjJ,GAAA+H,UAAAxE,EAAAwE,UACA/H,EApDA,GAAAuG,MACAC,KACAgH,EAAA,KACAC,KACAvG,EAAArH,EAAAqH,IAGArH,GAAA6N,OAAA,WAAA,SAAAC,EAAAC,IAEA,OAAAA,GAAA,OAAAD,GAAA,OAAAC,KACArH,EAAA1G,EAAAwL,SACAmC,EAAA3N,EAAAgO,gBACAtH,GAAAA,EAAAvB,OACAyI,EAAA5N,EAAA2G,UACAA,EAAAjD,EAAAuK,WAAAL,GACAjH,GACAD,EACAA,EAAAvB,KAAAvH,QAAAgJ,KAAAD,GAAAxB,KAEAuB,EAAA9I,QAAAgJ,KAAAD,GAEAD,EAAAC,UAAAiH,GAEAnI,EAAAyB,MAAA,4BAAA0G,IAIAlH,GACAA,EAAAnI,QACAmI,EAAAnI,MAAA,aAEAmI,EAAAyB,mBACAzB,EAAAyB,iBAAAJ,EAAA,wBAEA/H,EAAA0G,MAAAA,GAEAjB,EAAAyB,MAAA,qCAGA,GAGAlH,EAAAiL,UAAA,EACAjL,EAAAkO,UAAA,GAGAlO,EAAAkI,UAAAxE,EAAAwE,UASAlI,EAAAmO,eAAA,WACAnO,EAAAiL,UAAAjL,EAAAiL,SACAjL,EAAAiL,WACAjL,EAAAoO,qBACApO,EAAAqO,UAAAzQ,QAAAgJ,KAAA5G,EAAAwL,aACA9F,EAAA6B,WAAA,mBAIAvH,EAAAiL,UACAvF,EAAA6B,WAAA,sBAAAF,EAAAX,IAIA1G,EAAAqD,IAAA,oBAAA,WACArD,EAAAmO,mBAGAnO,EAAAsO,YAAA,SAAAzD,GACAnF,EAAA6B,WAAA,8BAAAsD,qBAAAA,KAGA7K,EAAAuO,eAAA,WACAvO,EAAAiL,UAAA,EACAjL,EAAAoO,qBACApO,EAAAqO,UAAAzQ,QAAAgJ,KAAA5G,EAAAqO,UAAArO,EAAAwL,WAEA9F,EAAA6B,WAAA,+BAIAvH,EAAAwO,oBAAA,WACA,GAAAC,GAAAf,GAGAe,GAAA7H,MACArI,MAAAmI,EAAAnI,OAIAkQ,EAAAR,WAAAvK,EAAAuK,WAGAQ,EAAA/J,MAAA8I,EAAA9I,KAEA,IAAAyF,GAAApC,EAAA,qBACArB,GAAA0B,kBACA+B,EAAAzD,EAAA0B,gBAEA,IAAAqB,GAAA3B,EAAA4B,MACAvJ,MAAAsO,EACAhQ,YAAA0L,EACAX,SAAA,SACAD,YAAA,2BACA3E,KAAA,MAEA6J,GAAAhI,gBAAA,SAAAY,EAAAV,GACAlB,EAAAiJ,KAAA,uBAAArH,GACAkG,EAAA9G,gBAAAC,EAAAC,GACAD,EAAAC,YAAAU,IACAX,EAAAC,UAAAU,IAGAoH,EAAA9E,YAAA,WAEAjD,EAAAnI,MAAAkQ,EAAA7H,KAAArI,MAEAkL,EAAAG,QACA6E,EAAA5E,aAKA7J,EAAA2O,gBAAA,WACA,GAEA7I,GAFA8I,EAAAlB,IACAhH,EAAA1G,EAAA0G,KAEA9I,SAAAiR,WAAAlB,IACA7H,KACAlI,QAAAmH,QAAArB,EAAAoC,QAAA,SAAAxH,EAAAwI,GACA6G,EAAArP,EAAAwI,EAAAJ,KACAZ,EAAAgB,GAAAxI,MAIAwH,EAAApC,EAAAoC,QAEA8I,EAAA9I,QAAAA,EAGA8I,EAAA1G,UAAAlI,EAAAkI,UAGAlI,EAAAiC,QAAA0F,aACA3H,EAAA0H,iBAAA6F,EAAA7F,iBAGA,IAAAoH,GAAA/G,EAAA,iBACArB,GAAAqI,iBACAD,EAAApI,EAAAqI,eAGA,IAAAzF,IACAnJ,MAAAyO,EACAnQ,YAAAqQ,EACAvF,YAAA,uBACAC,SAAA,UAGAC,EAAA3B,EAAA4B,KAAAJ,EACAsF,GAAAI,UAAA,SAAA1Q,GACA,GAAAyH,IACAe,KAAAxI,EACAJ,OAAAqP,EAAA1G,oBAAAvI,GAEAiP,GAAAnG,oBAAAV,EAAAX,EAAAsB,GAEAoC,EAAAG,QACAgF,EAAA/E,WAGA0D,EAAA/F,oBAAAlJ,IACAmP,EAAAzN,EAAA+F,IAGA6I,EAAAjF,YAAA,WAEAF,EAAAG,QACAgF,EAAA/E,aAIA7J,EAAAoH,oBAAAmG,EAAAnG,oBAUA,QAAA9G,GAAAN,EAAA+I,EAAAkG,GAEA,GAAAhN,IACAoF,KAAA4H,EAAA5H,KACA6H,UAAA,EACAhG,oBAAAsE,EAAAnJ,gBAAA4K,EAAA/F,qBACAiG,YAAA3B,EAAAnJ,gBAAA4K,EAAAE,aACAC,YAAA5B,EAAAnJ,gBAAA4K,EAAAG,aACAzH,WAAA6F,EAAAnJ,gBAAA4K,EAAAtH,YAEA/J,SAAAwI,UAAA6I,EAAAC,YACAjN,EAAAiN,SAAA1B,EAAAnJ,gBAAA4K,EAAAC,WAEAlP,EAAAiC,QAAAA,EA1PA,MHirCIvD,GAAW2M,SAAW,WGhrC1BvH,SAAA,EACA5D,SAAA,KACAoL,YAAA,EACAnL,OACAwG,UAAA,IACAU,KAAA,IACA+H,YAAA,IACAF,SAAA,IACAjE,SAAA,IACAmD,mBAAA,IACAe,YAAA,IACA3D,SAAA,IACAwC,gBAAA,IACArG,WAAA,KAEAjJ,WAAAA,EACA4B,KAAAA,EACA7B,YAAAsJ,EAAA,qBC7CAnK,QAAAC,OAAA,OACAoC,UAAA,mBAAA,WAAA,kBAAA,iBAAA,SAAA4L,EAAA9D,EAAAsH,GAiBA,QAAA/O,GAAAN,EAAA+I,GACAnL,QAAAwI,UAAApG,EAAAqF,IAAAE,UAAA3H,QAAAqJ,QAAAjH,EAAAqF,IAAAE,UACAsG,EAAAwD,GAAArP,EAAA,SAAAsP,GACAvG,EAAAwG,OAAAD,KAjBA,OACApP,SAAA,IACA4D,SAAA,EACA3D,OACAkF,IAAA,IACAmG,SAAA,IACAP,SAAA,IACAmD,mBAAA,IACAnM,QAAA,KAEAxD,YAAAsJ,EAAA,qBACAzH,KAAAA,MCfA1C,QAAAC,OAAA,OACAoC,UAAA,sBAAA,OAAA,WAAA,aAAA,kBAAA,cAAA,YAAA,SAAAwF,EAAAoG,EAAAnG,EAAAqC,EAAAyH,EAAA9L,GAoBA,QAAA+L,GAAAzP,EAAAwF,EAAAkK,GACA,GAAA5J,GAAAN,EAAAM,OAEA9F,GAAA2P,OAAA,WACA7J,EAAAjE,OAAA6N,EAAAE,SAAA,EAAA9J,EAAAjE,OAAA6N,EAAAG,SAAA,GAAA,IACAnK,EAAA6B,WAAA,4BAOA,QAAAuI,GAAAtK,EAAA5D,GAEA,IAAA,GADAtD,GAAA,KACAwG,EAAA,EAAAA,EAAAU,EAAAM,QAAAV,OAAAN,IAAA,CACA,GAAAiB,GAAAP,EAAAM,QAAAhB,EACA,IAAApB,EAAAoH,SAAA/E,EAAAwC,IAAA3G,GAAA,CACAtD,EAAAyH,CACA,QAGA,MAAAzH,GAMA,QAAAyR,GAAArJ,EAAA9E,GAEA,IAAA,GADA4D,GAAA,KACAV,EAAA,EAAAA,EAAA4B,EAAAvB,KAAAC,OAAAN,IAAA,CAEA,IAAA,GADAkL,GAAAtJ,EAAAvB,KAAAL,GACAqC,EAAA,EAAAA,EAAA6I,EAAAzK,QAAAH,OAAA+B,IAAA,CACA,GAAA8I,GAAAD,EAAAzK,QAAA4B,EACA,IAAAzD,EAAAoH,SAAAmF,EAAAC,IAAAtO,GAAA,CACA4D,EAAAyK,CACA,OACAA,EAAA9K,OACAK,EAAAuK,EAAAE,EAAArO,IAGA,GAAA4D,EACA,MAGA,MAAAA,GAMA,QAAA2K,GAAAC,GACA,GAAA7N,GAAA6N,EAAAC,aAAA,SACA,OAAA9N,GAAAA,EAAA,KAMA,QAAA+N,GAAAtQ,EAAA0G,EAAA6J,EAAAb,GAEA,GAAAQ,GAAAC,EAAAT,EAAAc,MACAC,EAAAV,EAAArJ,EAAAwJ,EAEA,IAAAO,EAAA,CAEA,GAAAlI,GAAA4H,EAAAT,EAAAgB,MACApS,EAAAwR,EAAAW,EAAAlI,EAEAjK,GAEA0B,EAAA2P,OAAA,WACAY,EAAAzK,UACAyK,EAAAzK,YAEAyK,EAAAzK,QAAAjE,OAAA6N,EAAAE,SAAA,EAAAtR,GAEAoH,EAAA6B,WAAA,4BAGA9B,EAAAmD,KAAA,iCAAAL,OAGA9C,GAAAmD,KAAA,iCAAAsH,GAOA,QAAAS,GAAA3Q,EAAAwF,EAAAkK,GAEA1P,EAAA2P,OAAA,WACAnK,EAAAM,QAAAjE,OAAA6N,EAAAG,SAAA,GACAnK,EAAA6B,WAAA,gCAOA,QAAAqJ,GAAA5Q,EAAA+I,EAAArC,EAAAlB,GAEA,GAAA4K,GAAArH,EAAA,GACA8H,EAAAC,SAAAC,OAAAX,GACAY,MAAA,UACAC,OAAA,YACAC,WAAA,cACAC,UAAA,IACAC,MAAA,SAAA1B,GACAY,EAAAtQ,EAAA0G,EAAAlB,EAAAkK,IAEA2B,SAAA,SAAA3B,GACAiB,EAAA3Q,EAAAwF,EAAAkK,IAEA4B,SAAA,SAAA5B,GACAD,EAAAzP,EAAAwF,EAAAkK,KAKA3G,GAAAwI,GAAA,WAAA,WAGAV,EAAAT,IACAS,EAAAW,YAKA,QAAAlR,GAAAN,EAAA+I,GAEA,GAAAxC,GAAAvG,EAAAwF,MACAe,GAAA2J,MACA3J,EAAA2J,IAAAxM,EAAAnB,MAGA3E,QAAAwI,UAAAG,EAAApB,OAAAvH,QAAAqJ,QAAAV,EAAApB,MAEA0G,EAAA2D,GAAAxP,EAAA,SAAAsP,GACAvG,EAAAwG,OAAAD,KAIAsB,EAAA5Q,EAAA+I,EAAA/I,EAAAwL,SAAAjF,GAhKA,OACArG,SAAA,IACA4D,SAAA,EACA3D,OACAqF,OAAA,IACAyF,SAAA,IACAmD,mBAAA,IACA5C,SAAA,IACAvJ,QAAA,KAEAxD,YAAAsJ,EAAA,wBACAzH,KAAAA,MCfA1C,QAAAC,OAAA,OACA4T,OAAA,uBAAA,UAAA,SAAAC,GAGA,MAAA,UAAAhB,EAAA1L,GACA,GAAA2M,KAKA,OAJA/T,SAAAmH,QAAA2L,EAAA,SAAA5S,EAAA8T,GACA9T,EAAAkH,GAAA4M,EACAD,EAAAjQ,KAAA5D,KAEA4T,EAAA,WAAAC,EAAA3M,OCpCApH,QAAAC,OAAA,uBAAA,QACAK,QAAA,oBAAA,SAAAG,GAEAA,EACAsI,UAAA,MACAxB,OACAI,UACA+C,WAAA,kBAIA3B,UAAA,OACAxB,OACAI,UACA+C,WAAA,aAEAA,WAAA,iBAIA3B,UAAA,OACAxB,OACAI,UACA+C,WAAA,WACAxC,aAEAwC,WAAA,WACAxC,iBAIAa,UAAA,YACAxB,OACAI,UACA+C,WAAA,gBAGA/C,UACA+C,WAAA,aAEAA,WAAA,aAEAA,WAAA,iBAIA3B,UAAA,UACAxB,OACAI,UACA+C,WAAA,gBAGA/C,UACA+C,WAAA,aAEAA,WAAA,iBAIA3B,UAAA,aACAxB,OACAI,UACA+C,WAAA,gBAGA/C,UACA+C,WAAA,aAEAA,WAAA,eAGA/C,UACA+C,WAAA,kBAIA3B,UAAA,kBACAxB,OACAI,UACA+C,WAAA,aAEAA,WAAA,WACAnD,OACAI,UACA+C,WAAA,gBAGA/C,UACA+C,WAAA,aAEAA,WAAA,aAEAA,WAAA,qBAMA3B,UAAA,gBACAxB,OACAI,UACA+C,WAAA,aAEAA,WAAA,WACAnD,OACAI,UACA+C,WAAA,gBAGA/C,UACA+C,WAAA,aAEAA,WAAA,wBC/EA1K,QAAAC,OAAA,gBAAA,eACAgU,SAAA,aAAA,YAAA,SAAAC,GAsBA,QAAAC,KACA,MAAAC,GAGA,QAAAC,KACA,MAAAC,GAGA,QAAAhK,GAAAiK,GACA,GAAAC,GAAAJ,EAAAE,GAAAC,EACA,OAAAC,GAAAA,EAAAD,EA9BA,GAAArM,MACA/B,EAAA,GACAkK,KACA/B,EAAA,2CACAM,EAAA,oNAMAjB,EAAA,KAGA8G,EAAA;AACA,OAAA,GAGAH,EAAAJ,EAAAQ,cACAN,EAAAF,EAAAS,gBA4EApQ,MAAA7D,OAAA,SAAA+I,EAAA/I,GACA,GAAAyH,GAAAnI,QAAAsE,QAAAvD,QAAA,EAAA0J,WAAA,GAAA/J,EACA,IAAAyH,EAAA9G,KAAA,CACA,GAAAA,IACAN,QAAA,EACA8I,WAAA,EACA8C,MAAA8H,EAEAzU,SAAAsE,OAAAjD,EAAA8G,EAAA9G,MACA8G,EAAA9G,KAAAA,EAGA,MADA6G,GAAAuB,GAAAtB,EACA5D,MAqBAA,KAAA4B,YAAA,SAAAyO,GAEA,MADAzO,GAAAyO,EACArQ,MAuBAA,KAAAwE,UAAA,SAAAU,EAAAV,GAEA,MADAsH,GAAA5G,GAAAV,EACAxE,MAeAA,KAAA+J,gBAAA,SAAA7L,GAEA,MADA6L,GAAA7L,EACA8B,MAgBAA,KAAAqK,gBAAA,SAAAnM,GAEA,MADAmM,GAAAnM,EACA8B,MAeAA,KAAAoJ,yBAAA,SAAAkH,GAEA,MADAlH,GAAAkH,EACAtQ,MAeAA,KAAAuQ,UAAA,SAAAC,GACA,IAAAX,EAAAW,GAGA,KAAA,IAAAC,OAAA,sBAAAD,EAAA,2BAEA,OAJAT,GAAAS,EAIAxQ,MAgBAA,KAAA0Q,UAAA,SAAAF,EAAAG,GACA,IAAAlV,QAAA2G,SAAAoO,GACA,KAAA,IAAAC,OAAA,2BAGA,KAAAhV,QAAAmV,SAAAD,GACA,KAAA,IAAAF,OAAA,iCAIA,OADAZ,GAAAW,GAAAG,EACA3Q,MAsBAA,KAAA6Q,KAAA,WACA,GAAA9C,GAAA,CAEA,QACApK,QAAAA,EACA/B,YAAAA,EACAkK,WAAAA,EACA/B,gBAAAA,EACAM,gBAAAA,EACAkG,UAAAvQ,KAAAuQ,UACAV,QAAAD,EACAG,aAAAD,EACA/J,UAAAA,EACAqD,yBAAAA,EAWAhJ,GAAA,WACA,OAAA,GAAA0Q,OAAAC,UAAA,OAAAhD,GAcApF,SAAA,SAAAvI,EAAA4Q,GAEA,MAAA,IAAA,GAAA5Q,EAAA6Q,aAAAD,EAAAC,iBCtUAxV,QAAAC,OAAA,iBCOAD,QAAAC,OAAA,cACAwV,SAAA,aAEAf,cAAA,QACAC,kBACAe,SACAC,iBAAA,QACAC,kBAAA,SACAC,iBAAA,QACAC,kBAAA,SACAC,iBAAA,QACAC,0BAAA,iBACAC,mCAAA,YACAC,gCAAA,iBACAC,iCAAA,eACAC,sCAAA,mBACAC,iCAAA,eACAC,sBAAA,iBACAC,kCAAA,gDACAC,2BAAA,wBACAC,wBAAA,yBACAC,4BAAA,kBACAC,0BAAA,gBACAC,wBAAA,4BACAC,8BAAA,oBACAC,0BAAA,iBAEAC,SACApB,iBAAA,SACAC,kBAAA,SACAC,iBAAA,SACAC,kBAAA,WACAC,iBAAA,UACAC,0BAAA,mBACAC,mCAAA,YACAC,gCAAA,mBACAC,iCAAA,mBACAC,sCAAA,gBACAC,iCAAA,sBACAC,sBAAA,mBACAC,kCAAA,8CACAC,2BAAA,aACAC,wBAAA,eACAC,4BAAA,mBACAC,0BAAA,mBACAC,wBAAA,iCACAC,8BAAA,aACAC,0BAAA,sBCqwEGhX","file":"angular-dashboard-framework-tpls.min.js","sourcesContent":["/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf', ['adf.provider', 'adf.locale', 'ui.bootstrap'])\n  .value('adfTemplatePath', '../src/templates/')\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\n  .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n  .value('adfVersion', '<<adfVersion>>');\n",null,"'use strict';\r\n\r\nangular.module('adf.widget.weather', ['adf.provider'])\r\n    .value('weatherApiKey', 'fe8e62312d4265df60bd83feb042853a')\r\n    .value('weatherServiceUrl', 'http://api.openweathermap.org/data/2.5/weather?units=metric&lang=pt&q=')\r\n    .config(function($sceDelegateProvider) {\r\n        $sceDelegateProvider.resourceUrlWhitelist([\r\n            // Allow same origin resource loads.\r\n            'self',\r\n            // Allow loading from our assets domain.  Notice the difference between * and **.\r\n            'http://*.openweathermap.org/**'\r\n        ])\r\n    })\r\n    .config(function(dashboardProvider){\r\n        dashboardProvider\r\n            .widget('weather', {\r\n                title: 'Pevisão do Tempo',\r\n                description: 'Exibe a previsão do tempo para a cidade selecionada',\r\n                templateUrl: '../src/templates/widgets/Weather/view.html',\r\n                controller: 'WeatherCtrl',\r\n                reload: true,\r\n                resolve: {\r\n                    data: function(weatcherService, config){\r\n                        if (config.location){\r\n                            return weatcherService.get(config.location);\r\n                        }\r\n                    }\r\n                },\r\n                edit: {\r\n                    templateUrl: '../src/templates/widgets/Weather/edit.html'\r\n                }\r\n            });\r\n    })\r\n    .service('weatcherService', function($q, $http, weatherServiceUrl, weatherApiKey, $sce){\r\n        return {\r\n            get: function(location){\r\n                var deferred = $q.defer();\r\n                var url = function(){\r\n                    return (weatherServiceUrl + location + '&appid=' + weatherApiKey);\r\n                };\r\n                $http.get(url()).then(\r\n                   function(res){\r\n                        if (res.data && res.data.cod === 200){\r\n                            deferred.resolve(res.data);\r\n                        } else {\r\n                            deferred.reject();\r\n                        }\r\n                    },\r\n                    function(){\r\n                        deferred.reject();\r\n                    });\r\n                return deferred.promise;\r\n            }\r\n        };\r\n    })\r\n    .controller('WeatherCtrl', function($scope, data){\r\n        $scope.data = data;\r\n    });","'use strict';\r\n\r\nangular.module('adf.widget.pdfviewer', ['adf.provider'])\r\n    .directive('pdfViewer', function($sce){\r\n        return {\r\n            restrict: 'AE',\r\n            scope: {\r\n                src: '='\r\n            },\r\n            template: '<div ng-show=\"show\" id=\"gdvId\" class=\"gdocsviewer\"><iframe ng-src=\"{{getUrl()}}\" width=\"{{settings.width}}\" height=\"{{settings.height}}\"></iframe></div>',\r\n            link: function(scope, element, attrs){\r\n                scope.settings = {\r\n                    width  : '600',\r\n                    height : '700'\r\n                };\r\n\r\n                var file = scope.src;\r\n                var ext = file.substring(file.lastIndexOf('.') + 1);\r\n                scope.gdvId = scope.$id;\r\n                scope.show = false;\r\n\r\n                scope.getUrl = function(){\r\n                    if (/^(tiff|pdf|ppt|pps|doc|docx|xls|xlsx|jpg|png)$/.test(ext)) {\r\n                        scope.show = true;\r\n                    }\r\n                    return $sce.trustAsResourceUrl('http://impress.app/Plugin/KbCore/views/pdf/index.php?file=' + scope.src);\r\n                }\r\n\r\n\r\n            }\r\n        }\r\n    })\r\n    .config(function(dashboardProvider){\r\n        dashboardProvider\r\n            .widget('pdfviewer', {\r\n                title: 'PDF',\r\n                description: 'Exibir PDFs',\r\n                category: 'Relatórios',\r\n                reload: true,\r\n                templateUrl: '../src/templates/widgets/PdfView/view.html',\r\n                edit: {\r\n                    templateUrl: '../src/templates/widgets/PdfView/edit.html',\r\n                    controller: 'PdfViewEditCtrl'\r\n                }\r\n            });\r\n    }).controller('PdfViewEditCtrl', function($scope){\r\n\r\n    function getPdfs(){\r\n        if (!$scope.config.pdfs){\r\n            $scope.config.pdfs = [];\r\n        }\r\n        return $scope.config.pdfs;\r\n    }\r\n\r\n    $scope.addLink = function(){\r\n        getPdfs().push({});\r\n    };\r\n\r\n    $scope.removeLink = function(index){\r\n        getPdfs().splice(index, 1);\r\n    };\r\n});/*\r\n * jQuery.gdocViewer - Embed linked documents using Google Docs Viewer\r\n * Licensed under MIT license.\r\n * Date: 2011/01/16\r\n *\r\n * @author Jawish Hameed\r\n * @version 1.0\r\n */\r\n(function($){\r\n    $.fn.gdocsViewer = function(options) {\r\n\r\n        var settings = {\r\n            width  : '600',\r\n            height : '700'\r\n        };\r\n\r\n        if (options) {\r\n            $.extend(settings, options);\r\n        }\r\n\r\n        return this.each(function() {\r\n            var file = $(this).attr('href');\r\n            var ext = file.substring(file.lastIndexOf('.') + 1);\r\n\r\n            if (/^(tiff|pdf|ppt|pps|doc|docx|xls|xlsx)$/.test(ext)) {\r\n                $(this).after(function () {\r\n                    var id = $(this).attr('id');\r\n                    var gdvId = (typeof id !== 'undefined' && id !== false) ? id + '-gdocsviewer' : '';\r\n                    return '<div id=\"' + gdvId + '\" class=\"gdocsviewer\"><iframe src=\"http://docs.google.com/viewer?embedded=true&url=' + encodeURIComponent(file) + '\" width=\"' + settings.width + '\" height=\"' + settings.height + '\" style=\"border: none;\"></iframe></div>';\r\n                })\r\n            }\r\n        });\r\n    };\r\n})( jQuery );","angular.module('adf.widget.clock', ['adf.provider'])\r\n    .config(function(dashboardProvider){\r\n        dashboardProvider\r\n            .widget('clock', {\r\n                title: 'Relógio',\r\n                description: 'Exibe Data/Hora',\r\n                category: 'Diversos',\r\n                templateUrl: '../src/templates/widgets/Clock/view.html',\r\n                controller: 'ClockController',\r\n                controllerAs: 'clock',\r\n                config: {\r\n                    timePattern: 'HH:mm:ss',\r\n                    datePattern: 'DD/MM/YYYY'\r\n                },\r\n                edit: {\r\n                    templateUrl: '../src/templates/widgets/Clock/edit.html'\r\n                }\r\n            });\r\n    })\r\n    .controller('ClockController', function($scope, $interval, config){\r\n        var clock = this;\r\n\r\n        function setDateAndTime(){\r\n            var d = new moment();\r\n            clock.time = d.format(config.timePattern);\r\n            clock.date = d.format(config.datePattern);\r\n        }\r\n\r\n        setDateAndTime();\r\n\r\n        // refresh every second\r\n        var promise = $interval(setDateAndTime, 1000);\r\n\r\n        // cancel interval on scope destroy\r\n        $scope.$on('$destroy', function(){\r\n            $interval.cancel(promise);\r\n        });\r\n    });","'use strict';\r\n\r\nangular.module('adf.widget.linklist', ['adf.provider'])\r\n    .config(function(dashboardProvider){\r\n        dashboardProvider\r\n            .widget('linklist', {\r\n                title: 'Links',\r\n                description: 'Exibir Lista de Links',\r\n                category: 'Diversos',\r\n                templateUrl: '../src/templates/widgets/Linklist/view.html',\r\n                edit: {\r\n                    templateUrl: '../src/templates/widgets/Linklist/edit.html',\r\n                    controller: 'LinklistEditCtrl'\r\n                }\r\n            });\r\n    }).controller('LinklistEditCtrl', function($scope){\r\n\r\n    function getLinks(){\r\n        if (!$scope.config.links){\r\n            $scope.config.links = [];\r\n        }\r\n        return $scope.config.links;\r\n    }\r\n\r\n    $scope.addLink = function(){\r\n        getLinks().push({});\r\n    };\r\n\r\n    $scope.removeLink = function(index){\r\n        getLinks().splice(index, 1);\r\n    };\r\n});","\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/**\n * The widget service provide helper functions to render widgets and their content.\n */\nangular.module('adf')\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\n    'use strict';\n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    var exposed = {};\n\n    exposed.getTemplate = function(widget){\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .then(function(response) {\n                 return response.data;\n               })\n               .then(function(data) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, data);\n                 deferred.resolve(data);\n               })\n               .catch(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    };\n\n    return exposed;\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nangular.module('adf')\n  .factory('adfUtilsService', function () {\n    'use strict';\n\n    var service = {\n      stringToBoolean: stringToBoolean,\n      split: split\n    };\n    return service;\n\n    function stringToBoolean(string){\n      switch(angular.isString(string) ? string.toLowerCase() : null){\n        case 'true': case 'yes': case '1': return true;\n        case 'false': case 'no': case '0': case null: return false;\n        default: return Boolean(string);\n      }\n    }\n\n    /**\n     * Splits an object into an array multiple objects inside.\n     *\n     * @param object source object\n     * @param size size of array\n     *\n     * @return array of splitted objects\n     */\n    function split(object, size) {\n      var arr = [];\n      var i = 0;\n      angular.forEach(object, function(value, key){\n        var index = i++ % size;\n        if (!arr[index]){\n          arr[index] = {};\n        }\n        arr[index][key] = value;\n      });\n      return arr;\n    }\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nangular.module('adf')\n  .factory('adfStructurePreviewService', function () {\n    'use strict';\n\n    var service = {\n      adjustRowHeight: adjustRowHeight\n    };\n    return service;\n\n    function adjustRowHeight(container){\n      if (container.rows && container.rows.length > 0){\n        var height = 100 / container.rows.length;\n        angular.forEach(container.rows, function(row){\n          row.style = {\n            height: height + '%'\n          }\n\n          if (row.columns){\n            angular.forEach(row.columns, function(column){\n              adjustRowHeight(column);\n            });\n          }\n        });\n      }\n    }\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nangular.module('adf')\n  .factory('adfDashboardService', function ($log, dashboard, $rootScope) {\n    'use strict';\n\n    var service = {\n      changeStructure: changeStructure,\n      createConfiguration: createConfiguration,\n      addNewWidgetToModel: addNewWidgetToModel,\n      isEditModeImmediate: isEditModeImmediate,\n      createCategories: createCategories,\n\n      // expose internal functions for testing purposes\n      // TODO find a nicer way\n      _tests: {\n        _readColumns: _readColumns\n      }\n    };\n    return service;\n\n    function _copyWidgets(source, target) {\n      if ( source.widgets && source.widgets.length > 0 ){\n        var w = source.widgets.shift();\n        while (w){\n          target.widgets.push(w);\n          w = source.widgets.shift();\n        }\n      }\n    }\n\n    /**\n    * Copy widget from old columns to the new model\n    * @param object root the model\n    * @param array of columns\n    * @param counter\n    */\n    function _fillStructure(root, columns, counter) {\n      counter = counter || 0;\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (column) {\n            // if the widgets prop doesn't exist, create a new array for it.\n            // this allows ui.sortable to do it's thing without error\n            if (!column.widgets) {\n              column.widgets = [];\n            }\n\n            // if a column exist at the counter index, copy over the column\n            if (angular.isDefined(columns[counter])) {\n              // do not add widgets to a column, which uses nested rows\n              if (angular.isUndefined(column.rows)){\n                _copyWidgets(columns[counter], column);\n                counter++;\n              }\n            }\n\n            // run fillStructure again for any sub rows/columns\n            counter = _fillStructure(column, columns, counter);\n          });\n        });\n      }\n      return counter;\n    }\n\n    /**\n    * Read Columns: recursively searches an object for the 'columns' property\n    * @param object model\n    * @param array  an array of existing columns; used when recursion happens\n    */\n    function _readColumns(root, columns) {\n      columns = columns || [];\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (col) {\n            if (!col.hasOwnProperty('rows')) {\n              columns.push(col);\n            }\n            // keep reading columns until we can't any more\n            _readColumns(col, columns);\n          });\n        });\n      }\n\n      return columns;\n    }\n\n    function changeStructure(model, structure){\n      var columns = _readColumns(model);\n      var counter = 0;\n\n      model.rows = angular.copy(structure.rows);\n\n      while ( counter < columns.length ){\n        counter = _fillStructure(model, columns, counter);\n      }\n    }\n\n    function createConfiguration(type){\n      var cfg = {};\n      var config = dashboard.widgets[type].config;\n      if (config){\n        cfg = angular.copy(config);\n      }\n      return cfg;\n    }\n\n    /**\n     * Find first widget column in model.\n     *\n     * @param dashboard model\n     */\n    function _findFirstWidgetColumn(model){\n      var column = null;\n      if (!angular.isArray(model.rows)){\n        $log.error('model does not have any rows');\n        return null;\n      }\n      for (var i=0; i<model.rows.length; i++){\n        var row = model.rows[i];\n        if (angular.isArray(row.columns)){\n          for (var j=0; j<row.columns.length; j++){\n            var col = row.columns[j];\n            if (!col.rows){\n              column = col;\n              break;\n            }\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * Adds the widget to first column of the model.\n     *\n     * @param dashboard model\n     * @param widget to add to model\n     * @param name name of the dashboard\n     */\n    function addNewWidgetToModel(model, widget, name){\n      if (model){\n        var column = _findFirstWidgetColumn(model);\n        if (column){\n          if (!column.widgets){\n            column.widgets = [];\n          }\n          column.widgets.unshift(widget);\n\n          $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\n        } else {\n          $log.error('could not find first widget column');\n        }\n      } else {\n        $log.error('model is undefined');\n      }\n    }\n\n    /**\n     * Checks if the edit mode of the widget should be opened immediately.\n     *\n     * @param widget type\n     */\n    function isEditModeImmediate(type){\n      var widget = dashboard.widgets[type];\n      return widget && widget.edit && widget.edit.immediate;\n    }\n\n    /**\n     * Creates object with the category name as key and an array of widgets as value.\n     *\n     * @param widgets array of widgets\n     *\n     * @return array of categories\n     */\n    function createCategories(widgets){\n      var categories = {};\n      angular.forEach(widgets, function(widget, key){\n        var category = widget.category;\n        // if the widget has no category use a default one\n        if (!category){\n          category = 'Miscellaneous';\n        }\n        // push widget to category array\n        if (angular.isUndefined(categories[category])){\n          categories[category] = {widgets: {}};\n        }\n        categories[category].widgets[key] = widget;\n      });\n      return categories;\n    }\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf')\n  .directive('adfWidget', function($injector, $q, $log, $uibModal, $rootScope, dashboard, adfTemplatePath) {\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\n      scope: {\n        adfModel: '=',\n        definition: '=',\n        col: '=column',\n        editMode: '=',\n        options: '=',\n        widgetState: '='\n      },\n      controller: controller,\n      compile: function() {\n\n        /**\n         * use pre link, because link of widget-content\n         * is executed before post link widget\n         */\n        return {\n          pre: preLink,\n          post: postLink\n        };\n      }\n    };\n\n    function preLink($scope) {\n      var definition = $scope.definition;\n\n      //passs translate function from dashboard so we can translate labels inside html templates\n      $scope.translate = dashboard.translate;\n\n      if (definition) {\n        var w = dashboard.widgets[definition.type];\n        if (w) {\n          // pass title\n          if (!definition.title) {\n            definition.title = w.title;\n          }\n\n          if (!definition.titleTemplateUrl) {\n            definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\n            if (w.titleTemplateUrl) {\n              definition.titleTemplateUrl = w.titleTemplateUrl;\n            }\n          }\n\n          if (!definition.editTemplateUrl) {\n            definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\n            if (w.editTemplateUrl) {\n              definition.editTemplateUrl = w.editTemplateUrl;\n            }\n          }\n\n          if (!definition.titleTemplateUrl) {\n            definition.frameless = w.frameless;\n          }\n\n          if (!definition.styleClass) {\n            definition.styleClass = w.styleClass;\n          }\n\n          // set id for sortable\n          if (!definition.wid) {\n            definition.wid = dashboard.id();\n          }\n\n          // pass copy of widget to scope\n          $scope.widget = angular.copy(w);\n\n          // create config object\n          var config = definition.config;\n          if (config) {\n            if (angular.isString(config)) {\n              config = angular.fromJson(config);\n            }\n          } else {\n            config = {};\n          }\n\n          // pass config to scope\n          $scope.config = config;\n\n          // collapse exposed $scope.widgetState property\n          if (!$scope.widgetState) {\n            $scope.widgetState = {};\n            $scope.widgetState.isCollapsed= (w.collapsed === true) ? w.collapsed : false;\n          }\n\n        } else {\n          $log.warn('could not find widget ' + definition.type);\n        }\n      } else {\n        $log.debug('definition not specified, widget was probably removed');\n      }\n    }\n\n    function postLink($scope, $element) {\n      var definition = $scope.definition;\n      if (definition) {\n        // bind close function\n\n        var deleteWidget = function() {\n          var column = $scope.col;\n          if (column) {\n            var index = column.widgets.indexOf(definition);\n            if (index >= 0) {\n              column.widgets.splice(index, 1);\n            }\n          }\n          $element.remove();\n          $rootScope.$broadcast('adfWidgetRemovedFromColumn', definition);\n        };\n\n        $scope.remove = function() {\n          if ($scope.options.enableConfirmDelete) {\n            var deleteScope = $scope.$new();\n            deleteScope.translate = dashboard.translate;\n\n            var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n            if (definition.deleteTemplateUrl) {\n              deleteTemplateUrl = definition.deleteTemplateUrl;\n            }\n            var opts = {\n              scope: deleteScope,\n              templateUrl: deleteTemplateUrl,\n              windowClass: 'adf-remove-widget-modal',\n              backdrop: 'static'\n            };\n            var instance = $uibModal.open(opts);\n\n            deleteScope.closeDialog = function() {\n              instance.close();\n              deleteScope.$destroy();\n            };\n            deleteScope.deleteDialog = function() {\n              deleteWidget();\n              deleteScope.closeDialog();\n            };\n          } else {\n            deleteWidget();\n          }\n        };\n\n        // bind reload function\n        $scope.reload = function() {\n          $scope.$broadcast('widgetReload');\n        };\n\n        // bind edit function\n        $scope.edit = function() {\n          var editScope = $scope.$new();\n          editScope.translate = dashboard.translate;\n          editScope.definition = angular.copy(definition);\n\n          var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n          if (definition.editTemplateUrl) {\n            adfEditTemplatePath = definition.editTemplateUrl;\n          }\n\n          var opts = {\n            scope: editScope,\n            templateUrl: adfEditTemplatePath,\n            windowClass: 'adf-edit-widget-modal',\n            backdrop: 'static'\n          };\n\n          var instance = $uibModal.open(opts);\n\n          editScope.closeDialog = function() {\n            instance.close();\n            editScope.$destroy();\n          };\n\n          // TODO create util method\n          function createApplyPromise(result){\n            var promise;\n            if (typeof result === 'boolean'){\n              var deferred = $q.defer();\n              if (result){\n                deferred.resolve();\n              } else {\n                deferred.reject();\n              }\n              promise = deferred.promise;\n            } else {\n              promise = $q.when(result);\n            }\n            return promise;\n          }\n\n          editScope.saveDialog = function() {\n            // clear validation error\n            editScope.validationError = null;\n\n            // build injection locals\n            var widget = $scope.widget;\n\n            // create a default apply method for widgets\n            // without edit mode\n            // see issue https://goo.gl/KHPQLZ\n            var applyFn;\n            if (widget.edit){\n              applyFn = widget.edit.apply;\n            } else {\n              applyFn = function(){\n                return true;\n              };\n            }\n\n            // injection locals\n            var locals = {\n              widget: widget,\n              definition: editScope.definition,\n              config: editScope.definition.config\n            };\n\n            // invoke apply function and apply if success\n            var result = $injector.invoke(applyFn, applyFn, locals);\n            createApplyPromise(result).then(function(){\n              definition.title = editScope.definition.title;\n              angular.extend(definition.config, editScope.definition.config);\n              if (widget.edit && widget.edit.reload) {\n                // reload content after edit dialog is closed\n                $scope.$broadcast('widgetConfigChanged');\n              }\n              editScope.closeDialog();\n            }, function(err){\n              if (err){\n                editScope.validationError = err;\n              } else {\n                editScope.validationError = 'Validation durring apply failed';\n              }\n            });\n          };\n\n        };\n      } else {\n        $log.debug('widget not found');\n      }\n    }\n\n    function controller($scope){\n\n      $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n        $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n      });\n\n      $scope.$on('adfWidgetEnterEditMode', function(event, widget){\n        if (dashboard.idEquals($scope.definition.wid, widget.wid)){\n          $scope.edit();\n        }\n      });\n\n      $scope.widgetClasses = function(w, definition){\n        var classes = definition.styleClass || '';\n        // w is undefined, if the type of the widget is unknown\n        // see issue #216\n        if (!w || !w.frameless || $scope.editMode){\n          classes += ' panel panel-default';\n        }\n        return classes;\n      };\n\n      $scope.openFullScreen = function() {\n        var definition = $scope.definition;\n        var fullScreenScope = $scope.$new();\n        var opts = {\n          scope: fullScreenScope,\n          templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n          size: definition.modalSize || 'lg', // 'sm', 'lg'\n          backdrop: 'static',\n          windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n        };\n\n        var instance = $uibModal.open(opts);\n        fullScreenScope.closeDialog = function() {\n          instance.close();\n          fullScreenScope.$destroy();\n        };\n      };\n    }\n\n  });\n","(function(window, undefined) {'use strict';\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf', ['adf.provider', 'adf.locale', 'ui.bootstrap'])\n  .value('adfTemplatePath', '../src/templates/')\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\n  .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n  .value('adfVersion', '0.13.0-SNAPSHOT');\n\nangular.module(\"adf\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-column.html\",\"<div adf-id={{column.cid}} class=column ng-class=column.styleClass ng-model=column.widgets> <adf-widget ng-repeat=\\\"definition in column.widgets\\\" adf-model=adfModel definition=definition column=column edit-mode=editMode options=options widget-state=widgetState>  </adf-widget></div> \");\n$templateCache.put(\"../src/templates/dashboard-edit.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title ng-bind=\\\"translate(\\'ADF_COMMON_EDIT_DASHBOARD\\')\\\">Edit Dashboard</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=dashboardTitle ng-bind=\\\"translate(\\'ADF_COMMON_TITLE\\')\\\">Title</label> <input type=text class=form-control id=dashboardTitle ng-model=copy.title required> </div> <div class=form-group> <label ng-bind=\\\"translate(\\'ADF_EDIT_DASHBOARD_STRUCTURE_LABEL\\')\\\">Structure</label> <div class=row ng-init=\\\"splitted = split(structures, 3)\\\"> <div class=col-lg-4 ng-repeat=\\\"structureColumn in splitted\\\"> <div class=radio ng-repeat=\\\"(key, structure) in structureColumn\\\"> <div class=row> <div class=col-sm-2> <label> <input type=radio value={{key}} ng-model=model.structure ng-change=\\\"changeStructure(key, structure)\\\"> </label> </div> <div class=col-sm-9 ng-click=\\\"changeStructure(key, structure)\\\"> <adf-structure-preview name=key structure=structure selected=\\\"model.structure == key\\\"> </adf-structure-preview> </div> </div> </div> </div> </div> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div> \");\n$templateCache.put(\"../src/templates/dashboard-row.html\",\"<div class=row ng-class=row.styleClass ng-style=row.style>  </div> \");\n$templateCache.put(\"../src/templates/dashboard-title.html\",\"<h1> {{model.title}} <span style=\\\"font-size: 16px\\\" class=pull-right> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_ADD\\') }}\\\" ng-click=addWidgetDialog()> <i class=\\\"glyphicon glyphicon-plus-sign\\\"></i> </a> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_COMMON_EDIT_DASHBOARD\\') }}\\\" ng-click=editDashboardDialog()> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href ng-if=options.editable title=\\\"{{editMode ? translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_SAVE\\') : translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE\\') }}\\\" ng-click=toggleEditMode()> <i class=glyphicon x-ng-class=\\\"{\\'glyphicon-edit\\' : !editMode, \\'glyphicon-save\\' : editMode}\\\"></i> </a> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_UNDO\\') }}\\\" ng-click=cancelEditMode()> <i class=\\\"glyphicon glyphicon-repeat adf-flip\\\"></i> </a> </span> </h1> \");\n$templateCache.put(\"../src/templates/dashboard.html\",\"<div class=dashboard-container> <div ng-include src=model.titleTemplateUrl></div> <div class=dashboard x-ng-class=\\\"{\\'edit\\' : editMode}\\\"> <adf-dashboard-row row=row adf-model=model options=options ng-repeat=\\\"row in model.rows\\\" edit-mode=editMode continuous-edit-mode=continuousEditMode> </adf-dashboard-row></div> </div> \");\n$templateCache.put(\"../src/templates/structure-preview.html\",\"<div class=structure-preview ng-class=\\\"{selected: selected}\\\"> <h4>{{name}}</h4> <adf-dashboard-row ng-repeat=\\\"row in preview.rows\\\" row=row> </adf-dashboard-row></div> \");\n$templateCache.put(\"../src/templates/widget-add.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title ng-bind=\\\"translate(\\'ADF_WIDGET_ADD_HEADER\\')\\\">Add new widget</h4> </div> <div class=modal-body>  <div ng-if=createCategories> <uib-tabset ng-init=\\\"categorized = createCategories(widgets)\\\"> <uib-tab heading={{category.name}} ng-repeat=\\\"category in categorized | adfOrderByObjectKey: \\'name\\'\\\"> <dl class=dl-horizontal style=\\\"margin-top: 10px;\\\"> <dt ng-repeat-start=\\\"widget in category.widgets | adfOrderByObjectKey: \\'key\\'\\\"> <a href ng-click=addWidget(widget.key)> {{widget.title}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description}} </dd> </dl> </uib-tab> </uib-tabset> </div>  <div style=\\\"display: inline-block;\\\" ng-if=!createCategories> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"widget in widgets | adfOrderByObjectKey: \\'key\\'\\\"> <a href ng-click=addWidget(widget.key)> {{widget.title}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description}} </dd> </dl> </div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div> \");\n$templateCache.put(\"../src/templates/widget-delete.html\",\"<div class=modal-header> <h4 class=modal-title><span ng-bind=\\\"translate(\\'ADF_COMMON_DELETE\\')\\\">Delete</span> {{widget.title}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle ng-bind=\\\"translate(\\'ADF_WIDGET_DELETE_CONFIRM_MESSAGE\\')\\\">Are you sure you want to delete this widget ?</label> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=deleteDialog() ng-bind=\\\"translate(\\'ADF_COMMON_DELETE\\')\\\">Delete</button> </div> \");\n$templateCache.put(\"../src/templates/widget-edit.html\",\"<form name=widgetEditForm novalidate role=form ng-submit=saveDialog()> <div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>{{widget.title}}</h4> </div> <div class=modal-body> <div class=\\\"alert alert-danger\\\" role=alert ng-show=validationError> <strong>Apply error:</strong> {{validationError}} </div> <div class=form-group> <label for=widgetTitle ng-bind=\\\"translate(\\'ADF_COMMON_TITLE\\')\\\">Title</label> <input type=text class=form-control id=widgetTitle ng-model=definition.title placeholder=\\\"Enter title\\\" required> </div> <div ng-if=widget.edit> <adf-widget-content adf-model=adfModel model=definition content=widget.edit> </adf-widget-content></div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CANCEL\\')\\\">Cancel</button> <input type=submit class=\\\"btn btn-primary\\\" ng-disabled=widgetEditForm.$invalid ng-value=\\\"translate(\\'ADF_COMMON_APPLY\\')\\\"> </div> </form> \");\n$templateCache.put(\"../src/templates/widget-fullscreen.html\",\"<div class=modal-header> <div class=\\\"pull-right widget-icons\\\"> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REFRESH\\') }}\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a> <a href title=close ng-click=closeDialog()> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> </div> <h4 class=modal-title>{{definition.title}}</h4> </div> <div class=modal-body> <adf-widget-content adf-model=adfModel model=definition content=widget> </adf-widget-content></div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div> \");\n$templateCache.put(\"../src/templates/widget-title.html\",\"<h3 class=panel-title> {{definition.title}} <span class=pull-right> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REFRESH\\') }}\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_MOVE\\') }}\\\" class=adf-move ng-if=editMode> <i class=\\\"glyphicon glyphicon-move\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_COLLAPSE\\') }}\\\" ng-show=\\\"options.collapsible && !widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-minus\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_EXPAND\\') }}\\\" ng-show=\\\"options.collapsible && widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-plus\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_EDIT\\') }}\\\" ng-click=edit() ng-if=editMode> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_FULLSCREEN\\') }}\\\" ng-click=openFullScreen() ng-show=options.maximizable> <i class=\\\"glyphicon glyphicon-fullscreen\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REMOVE\\') }}\\\" ng-click=remove() ng-if=editMode> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> </span> </h3> \");\n$templateCache.put(\"../src/templates/widget.html\",\"<div adf-id={{definition.wid}} adf-widget-type={{definition.type}} ng-class=\\\"widgetClasses(widget, definition)\\\" class=widget> <div class=\\\"panel-heading clearfix\\\" ng-if=\\\"!widget.frameless || editMode\\\"> <div ng-include src=definition.titleTemplateUrl></div> </div> <div ng-class=\\\"{\\'panel-body\\':!widget.frameless || editMode}\\\" uib-collapse=widgetState.isCollapsed> <adf-widget-content adf-model=adfModel model=definition content=widget> </adf-widget-content></div> </div> \");\n$templateCache.put(\"../src/templates/widgets/LinkList/edit.html\",\"<form class=form-inline role=form> <div> <label>Links</label> </div> <div class=padding-bottom ng-repeat=\\\"link in config.links\\\"> <div class=form-group> <label class=sr-only for=title-{{$index}}>Título</label> <input type=text id=title-{{$index}} class=form-control placeholder=Título ng-model=link.title required> </div> <div class=form-group> <label class=sr-only for=href-{{$index}}>URL</label> <input type=text id=href-{{$index}} class=form-control placeholder=http://example.com ng-model=link.href required> </div> <div class=form-group> <label class=sr-only for=target-{{$index}}>Target</label> <input type=text id=target-{{$index}} class=form-control placeholder=_self ng-model=link.target required> </div> <button type=button class=\\\"btn btn-warning\\\" ng-click=removeLink($index)> <i class=\\\"fa fa-minus\\\"></i> Remover </button> </div> <button type=button class=\\\"btn btn-primary\\\" ng-click=addLink()> <i class=\\\"fa fa-plus\\\"></i> Adicionar </button> </form>\");\n$templateCache.put(\"../src/templates/widgets/LinkList/view.html\",\"<div class=linklist> <ul> <li ng-repeat=\\\"link in config.links | orderBy:\\'title\\'\\\"> <a target={{Link.target}} ng-href={{link.href}}>{{link.title}}</a> </li> </ul> </div>\");\n$templateCache.put(\"../src/templates/widgets/Clock/edit.html\",\"<form role=form> <div class=form-group> <label for=time>Time pattern</label> <input type=text class=form-control id=time ng-model=config.timePattern> </div> <div class=form-group> <label for=date>Date pattern</label> <input type=text class=form-control id=date ng-model=config.datePattern> </div> <p class=text-info> For the list of possible patterns, please have a look at <a target=_blank href=\\\"http://momentjs.com/docs/#/displaying/\\\">moment.js documentation</a> </p> </form>\");\n$templateCache.put(\"../src/templates/widgets/Clock/view.html\",\"<div class=clock> <div class=clock-time>{{clock.time}}</div> <div class=clock-date>{{clock.date}}</div> </div>\");\n$templateCache.put(\"../src/templates/widgets/PdfView/edit.html\",\"<form class=form-inline role=form> <div> <label>PDFs</label> </div> <div class=padding-bottom ng-repeat=\\\"pdf in config.pdfs\\\"> <div class=form-group> <label class=sr-only for=title-{{$index}}>Título</label> <input type=text id=title-{{$index}} class=form-control placeholder=Título ng-model=pdf.title required> </div> <div class=form-group> <label class=sr-only for=href-{{$index}}>URL</label> <input type=url id=href-{{$index}} class=form-control placeholder=http://example.com ng-model=pdf.href required> </div> <button type=button class=\\\"btn btn-warning\\\" ng-click=removeLink($index)> <i class=\\\"fa fa-minus\\\"></i> Remover </button> </div> <button type=button class=\\\"btn btn-primary\\\" ng-click=addLink()> <i class=\\\"fa fa-plus\\\"></i> Adicionar </button> </form>\");\n$templateCache.put(\"../src/templates/widgets/PdfView/view.html\",\"<div class=pdf> <uib-tabset> <uib-tab heading={{pdf.title}} ng-repeat=\\\"pdf in config.pdfs\\\"> <div class=\\\"embed-responsive embed-responsive-16by9\\\"> <div pdf-viewer class=embed-responsive-item src=pdf.href></div> </div> </uib-tab> </uib-tabset> </div>\");\n$templateCache.put(\"../src/templates/widgets/Weather/edit.html\",\"<form role=form> <div class=form-group> <label for=location>Cidade</label> <input type=location class=form-control id=location ng-model=config.location placeholder=\\\"Enter location\\\"> </div> </form>\");\n$templateCache.put(\"../src/templates/widgets/Weather/view.html\",\"<div class=text-center> <div class=\\\"alert alert-info\\\" ng-if=!data> Insira o nome da Cidade na configuração. </div> <div class=weather ng-if=data> <div class=col-md-4> <i class=\\\"owf owf-4x owf-{{data.weather[0].id}}\\\"></i> <p class=description>{{data.weather[0].description}}</p>  </div> <div class=col-md-8> <h4>{{data.name}} ({{data.sys.country}})</h4> <dl> <dt>Temperatura:</dt> <dd>{{data.main.temp_min | number:0}}ºC - {{data.main.temp_max | number:0}}ºC</dd> </dl> </div> </div> </div>\");}]);\n\r\n\r\nangular.module('adf.widget.weather', ['adf.provider'])\r\n    .value('weatherApiKey', 'fe8e62312d4265df60bd83feb042853a')\r\n    .value('weatherServiceUrl', 'http://api.openweathermap.org/data/2.5/weather?units=metric&lang=pt&q=')\r\n    .config([\"$sceDelegateProvider\", function($sceDelegateProvider) {\r\n        $sceDelegateProvider.resourceUrlWhitelist([\r\n            // Allow same origin resource loads.\r\n            'self',\r\n            // Allow loading from our assets domain.  Notice the difference between * and **.\r\n            'http://*.openweathermap.org/**'\r\n        ])\r\n    }])\r\n    .config([\"dashboardProvider\", function(dashboardProvider){\r\n        dashboardProvider\r\n            .widget('weather', {\r\n                title: 'Pevisão do Tempo',\r\n                description: 'Exibe a previsão do tempo para a cidade selecionada',\r\n                templateUrl: '../src/templates/widgets/Weather/view.html',\r\n                controller: 'WeatherCtrl',\r\n                reload: true,\r\n                resolve: {\r\n                    data: [\"weatcherService\", \"config\", function(weatcherService, config){\r\n                        if (config.location){\r\n                            return weatcherService.get(config.location);\r\n                        }\r\n                    }]\r\n                },\r\n                edit: {\r\n                    templateUrl: '../src/templates/widgets/Weather/edit.html'\r\n                }\r\n            });\r\n    }])\r\n    .service('weatcherService', [\"$q\", \"$http\", \"weatherServiceUrl\", \"weatherApiKey\", \"$sce\", function($q, $http, weatherServiceUrl, weatherApiKey, $sce){\r\n        return {\r\n            get: function(location){\r\n                var deferred = $q.defer();\r\n                var url = function(){\r\n                    return (weatherServiceUrl + location + '&appid=' + weatherApiKey);\r\n                };\r\n                $http.get(url()).then(\r\n                   function(res){\r\n                        if (res.data && res.data.cod === 200){\r\n                            deferred.resolve(res.data);\r\n                        } else {\r\n                            deferred.reject();\r\n                        }\r\n                    },\r\n                    function(){\r\n                        deferred.reject();\r\n                    });\r\n                return deferred.promise;\r\n            }\r\n        };\r\n    }])\r\n    .controller('WeatherCtrl', [\"$scope\", \"data\", function($scope, data){\r\n        $scope.data = data;\r\n    }]);\n\r\n\r\nangular.module('adf.widget.pdfviewer', ['adf.provider'])\r\n    .directive('pdfViewer', [\"$sce\", function($sce){\r\n        return {\r\n            restrict: 'AE',\r\n            scope: {\r\n                src: '='\r\n            },\r\n            template: '<div ng-show=\"show\" id=\"gdvId\" class=\"gdocsviewer\"><iframe ng-src=\"{{getUrl()}}\" width=\"{{settings.width}}\" height=\"{{settings.height}}\"></iframe></div>',\r\n            link: function(scope, element, attrs){\r\n                scope.settings = {\r\n                    width  : '600',\r\n                    height : '700'\r\n                };\r\n\r\n                var file = scope.src;\r\n                var ext = file.substring(file.lastIndexOf('.') + 1);\r\n                scope.gdvId = scope.$id;\r\n                scope.show = false;\r\n\r\n                scope.getUrl = function(){\r\n                    if (/^(tiff|pdf|ppt|pps|doc|docx|xls|xlsx|jpg|png)$/.test(ext)) {\r\n                        scope.show = true;\r\n                    }\r\n                    return $sce.trustAsResourceUrl('http://impress.app/Plugin/KbCore/views/pdf/index.php?file=' + scope.src);\r\n                }\r\n\r\n\r\n            }\r\n        }\r\n    }])\r\n    .config([\"dashboardProvider\", function(dashboardProvider){\r\n        dashboardProvider\r\n            .widget('pdfviewer', {\r\n                title: 'PDF',\r\n                description: 'Exibir PDFs',\r\n                category: 'Relatórios',\r\n                reload: true,\r\n                templateUrl: '../src/templates/widgets/PdfView/view.html',\r\n                edit: {\r\n                    templateUrl: '../src/templates/widgets/PdfView/edit.html',\r\n                    controller: 'PdfViewEditCtrl'\r\n                }\r\n            });\r\n    }]).controller('PdfViewEditCtrl', [\"$scope\", function($scope){\r\n\r\n    function getPdfs(){\r\n        if (!$scope.config.pdfs){\r\n            $scope.config.pdfs = [];\r\n        }\r\n        return $scope.config.pdfs;\r\n    }\r\n\r\n    $scope.addLink = function(){\r\n        getPdfs().push({});\r\n    };\r\n\r\n    $scope.removeLink = function(index){\r\n        getPdfs().splice(index, 1);\r\n    };\r\n}]);/*\r\n * jQuery.gdocViewer - Embed linked documents using Google Docs Viewer\r\n * Licensed under MIT license.\r\n * Date: 2011/01/16\r\n *\r\n * @author Jawish Hameed\r\n * @version 1.0\r\n */\r\n(function($){\r\n    $.fn.gdocsViewer = function(options) {\r\n\r\n        var settings = {\r\n            width  : '600',\r\n            height : '700'\r\n        };\r\n\r\n        if (options) {\r\n            $.extend(settings, options);\r\n        }\r\n\r\n        return this.each(function() {\r\n            var file = $(this).attr('href');\r\n            var ext = file.substring(file.lastIndexOf('.') + 1);\r\n\r\n            if (/^(tiff|pdf|ppt|pps|doc|docx|xls|xlsx)$/.test(ext)) {\r\n                $(this).after(function () {\r\n                    var id = $(this).attr('id');\r\n                    var gdvId = (typeof id !== 'undefined' && id !== false) ? id + '-gdocsviewer' : '';\r\n                    return '<div id=\"' + gdvId + '\" class=\"gdocsviewer\"><iframe src=\"http://docs.google.com/viewer?embedded=true&url=' + encodeURIComponent(file) + '\" width=\"' + settings.width + '\" height=\"' + settings.height + '\" style=\"border: none;\"></iframe></div>';\r\n                })\r\n            }\r\n        });\r\n    };\r\n})( jQuery );\nangular.module('adf.widget.clock', ['adf.provider'])\r\n    .config([\"dashboardProvider\", function(dashboardProvider){\r\n        dashboardProvider\r\n            .widget('clock', {\r\n                title: 'Relógio',\r\n                description: 'Exibe Data/Hora',\r\n                category: 'Diversos',\r\n                templateUrl: '../src/templates/widgets/Clock/view.html',\r\n                controller: 'ClockController',\r\n                controllerAs: 'clock',\r\n                config: {\r\n                    timePattern: 'HH:mm:ss',\r\n                    datePattern: 'DD/MM/YYYY'\r\n                },\r\n                edit: {\r\n                    templateUrl: '../src/templates/widgets/Clock/edit.html'\r\n                }\r\n            });\r\n    }])\r\n    .controller('ClockController', [\"$scope\", \"$interval\", \"config\", function($scope, $interval, config){\r\n        var clock = this;\r\n\r\n        function setDateAndTime(){\r\n            var d = new moment();\r\n            clock.time = d.format(config.timePattern);\r\n            clock.date = d.format(config.datePattern);\r\n        }\r\n\r\n        setDateAndTime();\r\n\r\n        // refresh every second\r\n        var promise = $interval(setDateAndTime, 1000);\r\n\r\n        // cancel interval on scope destroy\r\n        $scope.$on('$destroy', function(){\r\n            $interval.cancel(promise);\r\n        });\r\n    }]);\n\r\n\r\nangular.module('adf.widget.linklist', ['adf.provider'])\r\n    .config([\"dashboardProvider\", function(dashboardProvider){\r\n        dashboardProvider\r\n            .widget('linklist', {\r\n                title: 'Links',\r\n                description: 'Exibir Lista de Links',\r\n                category: 'Diversos',\r\n                templateUrl: '../src/templates/widgets/Linklist/view.html',\r\n                edit: {\r\n                    templateUrl: '../src/templates/widgets/Linklist/edit.html',\r\n                    controller: 'LinklistEditCtrl'\r\n                }\r\n            });\r\n    }]).controller('LinklistEditCtrl', [\"$scope\", function($scope){\r\n\r\n    function getLinks(){\r\n        if (!$scope.config.links){\r\n            $scope.config.links = [];\r\n        }\r\n        return $scope.config.links;\r\n    }\r\n\r\n    $scope.addLink = function(){\r\n        getLinks().push({});\r\n    };\r\n\r\n    $scope.removeLink = function(index){\r\n        getLinks().splice(index, 1);\r\n    };\r\n}]);\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/**\n * The widget service provide helper functions to render widgets and their content.\n */\nangular.module('adf')\n  .factory('widgetService', [\"$http\", \"$q\", \"$sce\", \"$templateCache\", \"dashboard\", function($http, $q, $sce, $templateCache, dashboard) {\n    \n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    var exposed = {};\n\n    exposed.getTemplate = function(widget){\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .then(function(response) {\n                 return response.data;\n               })\n               .then(function(data) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, data);\n                 deferred.resolve(data);\n               })\n               .catch(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    };\n\n    return exposed;\n  }]);\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nangular.module('adf')\n  .factory('adfUtilsService', function () {\n    \n\n    var service = {\n      stringToBoolean: stringToBoolean,\n      split: split\n    };\n    return service;\n\n    function stringToBoolean(string){\n      switch(angular.isString(string) ? string.toLowerCase() : null){\n        case 'true': case 'yes': case '1': return true;\n        case 'false': case 'no': case '0': case null: return false;\n        default: return Boolean(string);\n      }\n    }\n\n    /**\n     * Splits an object into an array multiple objects inside.\n     *\n     * @param object source object\n     * @param size size of array\n     *\n     * @return array of splitted objects\n     */\n    function split(object, size) {\n      var arr = [];\n      var i = 0;\n      angular.forEach(object, function(value, key){\n        var index = i++ % size;\n        if (!arr[index]){\n          arr[index] = {};\n        }\n        arr[index][key] = value;\n      });\n      return arr;\n    }\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nangular.module('adf')\n  .factory('adfStructurePreviewService', function () {\n    \n\n    var service = {\n      adjustRowHeight: adjustRowHeight\n    };\n    return service;\n\n    function adjustRowHeight(container){\n      if (container.rows && container.rows.length > 0){\n        var height = 100 / container.rows.length;\n        angular.forEach(container.rows, function(row){\n          row.style = {\n            height: height + '%'\n          }\n\n          if (row.columns){\n            angular.forEach(row.columns, function(column){\n              adjustRowHeight(column);\n            });\n          }\n        });\n      }\n    }\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nangular.module('adf')\n  .factory('adfDashboardService', [\"$log\", \"dashboard\", \"$rootScope\", function ($log, dashboard, $rootScope) {\n    \n\n    var service = {\n      changeStructure: changeStructure,\n      createConfiguration: createConfiguration,\n      addNewWidgetToModel: addNewWidgetToModel,\n      isEditModeImmediate: isEditModeImmediate,\n      createCategories: createCategories,\n\n      // expose internal functions for testing purposes\n      // TODO find a nicer way\n      _tests: {\n        _readColumns: _readColumns\n      }\n    };\n    return service;\n\n    function _copyWidgets(source, target) {\n      if ( source.widgets && source.widgets.length > 0 ){\n        var w = source.widgets.shift();\n        while (w){\n          target.widgets.push(w);\n          w = source.widgets.shift();\n        }\n      }\n    }\n\n    /**\n    * Copy widget from old columns to the new model\n    * @param object root the model\n    * @param array of columns\n    * @param counter\n    */\n    function _fillStructure(root, columns, counter) {\n      counter = counter || 0;\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (column) {\n            // if the widgets prop doesn't exist, create a new array for it.\n            // this allows ui.sortable to do it's thing without error\n            if (!column.widgets) {\n              column.widgets = [];\n            }\n\n            // if a column exist at the counter index, copy over the column\n            if (angular.isDefined(columns[counter])) {\n              // do not add widgets to a column, which uses nested rows\n              if (angular.isUndefined(column.rows)){\n                _copyWidgets(columns[counter], column);\n                counter++;\n              }\n            }\n\n            // run fillStructure again for any sub rows/columns\n            counter = _fillStructure(column, columns, counter);\n          });\n        });\n      }\n      return counter;\n    }\n\n    /**\n    * Read Columns: recursively searches an object for the 'columns' property\n    * @param object model\n    * @param array  an array of existing columns; used when recursion happens\n    */\n    function _readColumns(root, columns) {\n      columns = columns || [];\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (col) {\n            if (!col.hasOwnProperty('rows')) {\n              columns.push(col);\n            }\n            // keep reading columns until we can't any more\n            _readColumns(col, columns);\n          });\n        });\n      }\n\n      return columns;\n    }\n\n    function changeStructure(model, structure){\n      var columns = _readColumns(model);\n      var counter = 0;\n\n      model.rows = angular.copy(structure.rows);\n\n      while ( counter < columns.length ){\n        counter = _fillStructure(model, columns, counter);\n      }\n    }\n\n    function createConfiguration(type){\n      var cfg = {};\n      var config = dashboard.widgets[type].config;\n      if (config){\n        cfg = angular.copy(config);\n      }\n      return cfg;\n    }\n\n    /**\n     * Find first widget column in model.\n     *\n     * @param dashboard model\n     */\n    function _findFirstWidgetColumn(model){\n      var column = null;\n      if (!angular.isArray(model.rows)){\n        $log.error('model does not have any rows');\n        return null;\n      }\n      for (var i=0; i<model.rows.length; i++){\n        var row = model.rows[i];\n        if (angular.isArray(row.columns)){\n          for (var j=0; j<row.columns.length; j++){\n            var col = row.columns[j];\n            if (!col.rows){\n              column = col;\n              break;\n            }\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * Adds the widget to first column of the model.\n     *\n     * @param dashboard model\n     * @param widget to add to model\n     * @param name name of the dashboard\n     */\n    function addNewWidgetToModel(model, widget, name){\n      if (model){\n        var column = _findFirstWidgetColumn(model);\n        if (column){\n          if (!column.widgets){\n            column.widgets = [];\n          }\n          column.widgets.unshift(widget);\n\n          $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\n        } else {\n          $log.error('could not find first widget column');\n        }\n      } else {\n        $log.error('model is undefined');\n      }\n    }\n\n    /**\n     * Checks if the edit mode of the widget should be opened immediately.\n     *\n     * @param widget type\n     */\n    function isEditModeImmediate(type){\n      var widget = dashboard.widgets[type];\n      return widget && widget.edit && widget.edit.immediate;\n    }\n\n    /**\n     * Creates object with the category name as key and an array of widgets as value.\n     *\n     * @param widgets array of widgets\n     *\n     * @return array of categories\n     */\n    function createCategories(widgets){\n      var categories = {};\n      angular.forEach(widgets, function(widget, key){\n        var category = widget.category;\n        // if the widget has no category use a default one\n        if (!category){\n          category = 'Miscellaneous';\n        }\n        // push widget to category array\n        if (angular.isUndefined(categories[category])){\n          categories[category] = {widgets: {}};\n        }\n        categories[category].widgets[key] = widget;\n      });\n      return categories;\n    }\n  }]);\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n  .directive('adfWidget', [\"$injector\", \"$q\", \"$log\", \"$uibModal\", \"$rootScope\", \"dashboard\", \"adfTemplatePath\", function($injector, $q, $log, $uibModal, $rootScope, dashboard, adfTemplatePath) {\n\n    controller.$inject = [\"$scope\"];\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\n      scope: {\n        adfModel: '=',\n        definition: '=',\n        col: '=column',\n        editMode: '=',\n        options: '=',\n        widgetState: '='\n      },\n      controller: controller,\n      compile: function() {\n\n        /**\n         * use pre link, because link of widget-content\n         * is executed before post link widget\n         */\n        return {\n          pre: preLink,\n          post: postLink\n        };\n      }\n    };\n\n    function preLink($scope) {\n      var definition = $scope.definition;\n\n      //passs translate function from dashboard so we can translate labels inside html templates\n      $scope.translate = dashboard.translate;\n\n      if (definition) {\n        var w = dashboard.widgets[definition.type];\n        if (w) {\n          // pass title\n          if (!definition.title) {\n            definition.title = w.title;\n          }\n\n          if (!definition.titleTemplateUrl) {\n            definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\n            if (w.titleTemplateUrl) {\n              definition.titleTemplateUrl = w.titleTemplateUrl;\n            }\n          }\n\n          if (!definition.editTemplateUrl) {\n            definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\n            if (w.editTemplateUrl) {\n              definition.editTemplateUrl = w.editTemplateUrl;\n            }\n          }\n\n          if (!definition.titleTemplateUrl) {\n            definition.frameless = w.frameless;\n          }\n\n          if (!definition.styleClass) {\n            definition.styleClass = w.styleClass;\n          }\n\n          // set id for sortable\n          if (!definition.wid) {\n            definition.wid = dashboard.id();\n          }\n\n          // pass copy of widget to scope\n          $scope.widget = angular.copy(w);\n\n          // create config object\n          var config = definition.config;\n          if (config) {\n            if (angular.isString(config)) {\n              config = angular.fromJson(config);\n            }\n          } else {\n            config = {};\n          }\n\n          // pass config to scope\n          $scope.config = config;\n\n          // collapse exposed $scope.widgetState property\n          if (!$scope.widgetState) {\n            $scope.widgetState = {};\n            $scope.widgetState.isCollapsed= (w.collapsed === true) ? w.collapsed : false;\n          }\n\n        } else {\n          $log.warn('could not find widget ' + definition.type);\n        }\n      } else {\n        $log.debug('definition not specified, widget was probably removed');\n      }\n    }\n\n    function postLink($scope, $element) {\n      var definition = $scope.definition;\n      if (definition) {\n        // bind close function\n\n        var deleteWidget = function() {\n          var column = $scope.col;\n          if (column) {\n            var index = column.widgets.indexOf(definition);\n            if (index >= 0) {\n              column.widgets.splice(index, 1);\n            }\n          }\n          $element.remove();\n          $rootScope.$broadcast('adfWidgetRemovedFromColumn', definition);\n        };\n\n        $scope.remove = function() {\n          if ($scope.options.enableConfirmDelete) {\n            var deleteScope = $scope.$new();\n            deleteScope.translate = dashboard.translate;\n\n            var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n            if (definition.deleteTemplateUrl) {\n              deleteTemplateUrl = definition.deleteTemplateUrl;\n            }\n            var opts = {\n              scope: deleteScope,\n              templateUrl: deleteTemplateUrl,\n              windowClass: 'adf-remove-widget-modal',\n              backdrop: 'static'\n            };\n            var instance = $uibModal.open(opts);\n\n            deleteScope.closeDialog = function() {\n              instance.close();\n              deleteScope.$destroy();\n            };\n            deleteScope.deleteDialog = function() {\n              deleteWidget();\n              deleteScope.closeDialog();\n            };\n          } else {\n            deleteWidget();\n          }\n        };\n\n        // bind reload function\n        $scope.reload = function() {\n          $scope.$broadcast('widgetReload');\n        };\n\n        // bind edit function\n        $scope.edit = function() {\n          var editScope = $scope.$new();\n          editScope.translate = dashboard.translate;\n          editScope.definition = angular.copy(definition);\n\n          var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n          if (definition.editTemplateUrl) {\n            adfEditTemplatePath = definition.editTemplateUrl;\n          }\n\n          var opts = {\n            scope: editScope,\n            templateUrl: adfEditTemplatePath,\n            windowClass: 'adf-edit-widget-modal',\n            backdrop: 'static'\n          };\n\n          var instance = $uibModal.open(opts);\n\n          editScope.closeDialog = function() {\n            instance.close();\n            editScope.$destroy();\n          };\n\n          // TODO create util method\n          function createApplyPromise(result){\n            var promise;\n            if (typeof result === 'boolean'){\n              var deferred = $q.defer();\n              if (result){\n                deferred.resolve();\n              } else {\n                deferred.reject();\n              }\n              promise = deferred.promise;\n            } else {\n              promise = $q.when(result);\n            }\n            return promise;\n          }\n\n          editScope.saveDialog = function() {\n            // clear validation error\n            editScope.validationError = null;\n\n            // build injection locals\n            var widget = $scope.widget;\n\n            // create a default apply method for widgets\n            // without edit mode\n            // see issue https://goo.gl/KHPQLZ\n            var applyFn;\n            if (widget.edit){\n              applyFn = widget.edit.apply;\n            } else {\n              applyFn = function(){\n                return true;\n              };\n            }\n\n            // injection locals\n            var locals = {\n              widget: widget,\n              definition: editScope.definition,\n              config: editScope.definition.config\n            };\n\n            // invoke apply function and apply if success\n            var result = $injector.invoke(applyFn, applyFn, locals);\n            createApplyPromise(result).then(function(){\n              definition.title = editScope.definition.title;\n              angular.extend(definition.config, editScope.definition.config);\n              if (widget.edit && widget.edit.reload) {\n                // reload content after edit dialog is closed\n                $scope.$broadcast('widgetConfigChanged');\n              }\n              editScope.closeDialog();\n            }, function(err){\n              if (err){\n                editScope.validationError = err;\n              } else {\n                editScope.validationError = 'Validation durring apply failed';\n              }\n            });\n          };\n\n        };\n      } else {\n        $log.debug('widget not found');\n      }\n    }\n\n    function controller($scope){\n\n      $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n        $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n      });\n\n      $scope.$on('adfWidgetEnterEditMode', function(event, widget){\n        if (dashboard.idEquals($scope.definition.wid, widget.wid)){\n          $scope.edit();\n        }\n      });\n\n      $scope.widgetClasses = function(w, definition){\n        var classes = definition.styleClass || '';\n        // w is undefined, if the type of the widget is unknown\n        // see issue #216\n        if (!w || !w.frameless || $scope.editMode){\n          classes += ' panel panel-default';\n        }\n        return classes;\n      };\n\n      $scope.openFullScreen = function() {\n        var definition = $scope.definition;\n        var fullScreenScope = $scope.$new();\n        var opts = {\n          scope: fullScreenScope,\n          templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n          size: definition.modalSize || 'lg', // 'sm', 'lg'\n          backdrop: 'static',\n          windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n        };\n\n        var instance = $uibModal.open(opts);\n        fullScreenScope.closeDialog = function() {\n          instance.close();\n          fullScreenScope.$destroy();\n        };\n      };\n    }\n\n  }]);\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n  .directive('adfWidgetContent', [\"$log\", \"$q\", \"widgetService\", \"$compile\", \"$controller\", \"$injector\", \"dashboard\", function($log, $q, widgetService, $compile, $controller, $injector, dashboard) {\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      scope: {\n        adfModel: '=',\n        model: '=',\n        content: '='\n      },\n      link: link\n    };\n\n    function renderError($element, msg){\n        $log.warn(msg);\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n    }\n\n    function compileWidget($scope, $element, currentScope) {\n      var model = $scope.model;\n      var content = $scope.content;\n\n      var newScope = currentScope;\n      if (!model){\n        renderError($element, 'model is undefined')\n      } else if (!content){\n        var msg = 'widget content is undefined, please have a look at your browser log';\n        renderError($element, msg);\n      } else {\n        newScope = renderWidget($scope, $element, currentScope, model, content);\n      }\n      return newScope;\n    }\n\n    function renderWidget($scope, $element, currentScope, model, content) {\n      // display loading template\n      $element.html(dashboard.loadingTemplate);\n\n      // create new scope\n      var templateScope = $scope.$new();\n\n      // pass config object to scope\n      if (!model.config) {\n        model.config = {};\n      }\n\n      templateScope.config = model.config;\n\n      // local injections\n      var base = {\n        $scope: templateScope,\n        widget: model,\n        config: model.config\n      };\n\n      // get resolve promises from content object\n      var resolvers = {};\n      resolvers.$tpl = widgetService.getTemplate(content);\n      if (content.resolve) {\n        angular.forEach(content.resolve, function(promise, key) {\n          if (angular.isString(promise)) {\n            resolvers[key] = $injector.get(promise);\n          } else {\n            resolvers[key] = $injector.invoke(promise, promise, base);\n          }\n        });\n      }\n\n      // resolve all resolvers\n      $q.all(resolvers).then(function(locals) {\n        angular.extend(locals, base);\n\n        // pass resolve map to template scope as defined in resolveAs\n        if (content.resolveAs){\n          templateScope[content.resolveAs] = locals;\n        }\n\n        // compile & render template\n        var template = locals.$tpl;\n        $element.html(template);\n        if (content.controller) {\n          var templateCtrl = $controller(content.controller, locals);\n          if (content.controllerAs) {\n            templateScope[content.controllerAs] = templateCtrl;\n          }\n          $element.children().data('$ngControllerController', templateCtrl);\n        }\n        $compile($element.contents())(templateScope);\n      }, function(reason) {\n        // handle promise rejection\n        var msg = 'Could not resolve all promises';\n        if (reason) {\n          msg += ': ' + reason;\n        }\n        renderError($element, msg);\n      });\n\n      // destroy old scope\n      if (currentScope) {\n        currentScope.$destroy();\n      }\n\n      return templateScope;\n    }\n\n    function link($scope, $element) {\n      var currentScope = compileWidget($scope, $element, null);\n      $scope.$on('widgetConfigChanged', function() {\n        currentScope = compileWidget($scope, $element, currentScope);\n      });\n      $scope.$on('widgetReload', function() {\n        currentScope = compileWidget($scope, $element, currentScope);\n      });\n    }\n\n  }]);\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfStructurePreview', [\"adfTemplatePath\", \"adfStructurePreviewService\", function(adfTemplatePath, adfStructurePreviewService) {\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        name: '=',\n        structure: '=',\n        selected: '='\n      },\n      templateUrl: adfTemplatePath + 'structure-preview.html',\n      link: link\n    };\n\n    function link($scope){\n      var structure = angular.copy($scope.structure);\n      adfStructurePreviewService.adjustRowHeight(structure);\n      $scope.preview = structure;\n    }\n\n  }]);\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {string=} structure the default structure of the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\n *                   events during edit mode not reset it if edit mode is exited.\n * @param {boolean=} categories enable categories for the add widget dialog.\n */\n\nangular.module('adf')\n  .directive('adfDashboard', [\"$rootScope\", \"$log\", \"$timeout\", \"$uibModal\", \"dashboard\", \"adfTemplatePath\", \"adfDashboardService\", \"adfUtilsService\", function ($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, adfDashboardService, adfUtilsService) {\n    \n\n    controller.$inject = [\"$scope\"];\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude : false,\n      scope: {\n        structure: '@',\n        name: '@',\n        collapsible: '@',\n        editable: '@',\n        editMode: '@',\n        continuousEditMode: '=',\n        maximizable: '@',\n        adfModel: '=',\n        adfWidgetFilter: '=',\n        categories: '@'\n      },\n      controller: controller,\n      link: link,\n      templateUrl: adfTemplatePath + 'dashboard.html'\n    };\n\n    /**\n     * Opens the edit mode of the specified widget.\n     *\n     * @param dashboard scope\n     * @param widget\n     */\n    function _openEditMode($scope, widget){\n      // wait some time before fire enter edit mode event\n      $timeout(function(){\n        $scope.$broadcast('adfWidgetEnterEditMode', widget);\n      }, 200);\n    }\n\n    /**\n     * Directive controller function.\n     *\n     * @param dashboard scope\n     */\n    function controller($scope){\n      var model = {};\n      var structure = {};\n      var widgetFilter = null;\n      var structureName = {};\n      var name = $scope.name;\n\n      // Watching for changes on adfModel\n      $scope.$watch('adfModel', function(oldVal, newVal) {\n       // has model changed or is the model attribute not set\n       if (newVal !== null || (oldVal === null && newVal === null)) {\n         model = $scope.adfModel;\n         widgetFilter = $scope.adfWidgetFilter;\n         if ( ! model || ! model.rows ){\n           structureName = $scope.structure;\n           structure = dashboard.structures[structureName];\n           if (structure){\n             if (model){\n               model.rows = angular.copy(structure).rows;\n             } else {\n               model = angular.copy(structure);\n             }\n             model.structure = structureName;\n           } else {\n             $log.error( 'could not find structure ' + structureName);\n           }\n         }\n\n         if (model) {\n           if (!model.title){\n             model.title = 'Dashboard';\n           }\n           if (!model.titleTemplateUrl) {\n             model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\n           }\n           $scope.model = model;\n         } else {\n           $log.error('could not find or create model');\n         }\n       }\n      }, true);\n\n      // edit mode\n      $scope.editMode = false;\n      $scope.editClass = '';\n\n      //passs translate function from dashboard so we can translate labels inside html templates\n      $scope.translate = dashboard.translate;\n\n      function getNewModalScope() {\n       var scope = $scope.$new();\n       //pass translate function to the new scope so we can translate the labels inside the modal dialog\n       scope.translate = dashboard.translate;\n       return scope;\n      }\n\n      $scope.toggleEditMode = function(){\n       $scope.editMode = ! $scope.editMode;\n       if ($scope.editMode){\n         if (!$scope.continuousEditMode) {\n           $scope.modelCopy = angular.copy($scope.adfModel, {});\n           $rootScope.$broadcast('adfIsEditMode');\n         }\n       }\n\n       if (!$scope.editMode){\n         $rootScope.$broadcast('adfDashboardChanged', name, model);\n       }\n      };\n\n      $scope.$on('adfToggleEditMode', function() {\n         $scope.toggleEditMode();\n      });\n\n      $scope.collapseAll = function(collapseExpandStatus){\n       $rootScope.$broadcast('adfDashboardCollapseExpand',{collapseExpandStatus : collapseExpandStatus});\n      };\n\n      $scope.cancelEditMode = function(){\n       $scope.editMode = false;\n       if (!$scope.continuousEditMode) {\n         $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n       }\n       $rootScope.$broadcast('adfDashboardEditsCancelled');\n      };\n\n      // edit dashboard settings\n      $scope.editDashboardDialog = function(){\n       var editDashboardScope = getNewModalScope();\n       // create a copy of the title, to avoid changing the title to\n       // \"dashboard\" if the field is empty\n       editDashboardScope.copy = {\n         title: model.title\n       };\n\n       // pass dashboard structure to scope\n       editDashboardScope.structures = dashboard.structures;\n\n       // pass split function to scope, to be able to display structures in multiple columns\n       editDashboardScope.split = adfUtilsService.split;\n\n       var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\n       if(model.editTemplateUrl) {\n         adfEditTemplatePath = model.editTemplateUrl;\n       }\n       var instance = $uibModal.open({\n         scope: editDashboardScope,\n         templateUrl: adfEditTemplatePath,\n         backdrop: 'static',\n         windowClass: 'adf-edit-dashboard-modal',\n         size: 'lg'\n       });\n       editDashboardScope.changeStructure = function(name, structure){\n         $log.info('change structure to ' + name);\n         adfDashboardService.changeStructure(model, structure);\n         if (model.structure !== name){\n           model.structure = name;\n         }\n       };\n       editDashboardScope.closeDialog = function(){\n         // copy the new title back to the model\n         model.title = editDashboardScope.copy.title;\n         // close modal and destroy the scope\n         instance.close();\n         editDashboardScope.$destroy();\n       };\n      };\n\n      // add widget dialog\n      $scope.addWidgetDialog = function(){\n       var addScope = getNewModalScope();\n       var model = $scope.model;\n       var widgets;\n       if (angular.isFunction(widgetFilter)){\n         widgets = {};\n         angular.forEach(dashboard.widgets, function(widget, type){\n           if (widgetFilter(widget, type, model)){\n             widgets[type] = widget;\n           }\n         });\n       } else {\n         widgets = dashboard.widgets;\n       }\n       addScope.widgets = widgets;\n\n       //pass translate function to the new scope so we can translate the labels inside the modal dialog\n       addScope.translate = $scope.translate;\n\n       // pass createCategories function to scope, if categories option is enabled\n       if ($scope.options.categories){\n         $scope.createCategories = adfDashboardService.createCategories;\n       }\n\n       var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n       if(model.addTemplateUrl) {\n         adfAddTemplatePath = model.addTemplateUrl;\n       }\n\n       var opts = {\n         scope: addScope,\n         templateUrl: adfAddTemplatePath,\n         windowClass: 'adf-add-widget-modal',\n         backdrop: 'static'\n       };\n\n       var instance = $uibModal.open(opts);\n       addScope.addWidget = function(widget){\n         var w = {\n           type: widget,\n           config: adfDashboardService.createConfiguration(widget)\n         };\n         adfDashboardService.addNewWidgetToModel(model, w, name);\n         // close and destroy\n         instance.close();\n         addScope.$destroy();\n\n         // check for open edit mode immediately\n         if (adfDashboardService.isEditModeImmediate(widget)){\n           _openEditMode($scope, w);\n         }\n       };\n       addScope.closeDialog = function(){\n         // close and destroy\n         instance.close();\n         addScope.$destroy();\n       };\n      };\n\n      $scope.addNewWidgetToModel = adfDashboardService.addNewWidgetToModel;\n    }\n\n    /**\n     * Directive link function.\n     *\n     * @param dashboard scope\n     * @param directive DOM element\n     * @param directive attributes\n     */\n    function link($scope, $element, $attr) {\n      // pass options to scope\n      var options = {\n        name: $attr.name,\n        editable: true,\n        enableConfirmDelete: adfUtilsService.stringToBoolean($attr.enableConfirmDelete),\n        maximizable: adfUtilsService.stringToBoolean($attr.maximizable),\n        collapsible: adfUtilsService.stringToBoolean($attr.collapsible),\n        categories: adfUtilsService.stringToBoolean($attr.categories)\n      };\n      if (angular.isDefined($attr.editable)){\n        options.editable = adfUtilsService.stringToBoolean($attr.editable);\n      }\n      $scope.options = options;\n    }\n  }]);\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardRow', [\"$compile\", \"adfTemplatePath\", \"columnTemplate\", function ($compile, adfTemplatePath, columnTemplate) {\n    \n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        row: '=',\n        adfModel: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\n      link: link\n    };\n\n    function link($scope, $element) {\n      if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\n        $compile(columnTemplate)($scope, function(cloned) {\n          $element.append(cloned);\n        });\n      }\n    }\n  }]);\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardColumn', [\"$log\", \"$compile\", \"$rootScope\", \"adfTemplatePath\", \"rowTemplate\", \"dashboard\", function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\n    \n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        adfModel: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\n      link: link\n    };\n\n    /**\n     * moves a widget in between a column\n     */\n    function moveWidgetInColumn($scope, column, evt){\n      var widgets = column.widgets;\n      // move widget and apply to scope\n      $scope.$apply(function(){\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\n      });\n    }\n\n    /**\n     * finds a widget by its id in the column\n     */\n    function findWidget(column, index){\n      var widget = null;\n      for (var i=0; i<column.widgets.length; i++){\n        var w = column.widgets[i];\n        if (dashboard.idEquals(w.wid,index)){\n          widget = w;\n          break;\n        }\n      }\n      return widget;\n    }\n\n    /**\n     * finds a column by its id in the model\n     */\n    function findColumn(model, index){\n      var column = null;\n      for (var i=0; i<model.rows.length; i++){\n        var r = model.rows[i];\n        for (var j=0; j<r.columns.length; j++){\n          var c = r.columns[j];\n          if (dashboard.idEquals(c.cid, index)){\n            column = c;\n            break;\n          } else if (c.rows){\n            column = findColumn(c, index);\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * get the adf id from an html element\n     */\n    function getId(el){\n      var id = el.getAttribute('adf-id');\n      return id ? id : '-1';\n    }\n\n    /**\n     * adds a widget to a column\n     */\n    function addWidgetToColumn($scope, model, targetColumn, evt){\n      // find source column\n      var cid = getId(evt.from);\n      var sourceColumn = findColumn(model, cid);\n\n      if (sourceColumn){\n        // find moved widget\n        var wid = getId(evt.item);\n        var widget = findWidget(sourceColumn, wid);\n\n        if (widget){\n          // add new item and apply to scope\n          $scope.$apply(function(){\n            if (!targetColumn.widgets) {\n              targetColumn.widgets = [];\n            }\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\n\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\n          });\n        } else {\n          $log.warn('could not find widget with id ' + wid);\n        }\n      } else {\n        $log.warn('could not find column with id ' + cid);\n      }\n    }\n\n    /**\n     * removes a widget from a column\n     */\n    function removeWidgetFromColumn($scope, column, evt){\n      // remove old item and apply to scope\n      $scope.$apply(function(){\n        column.widgets.splice(evt.oldIndex, 1);\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n      });\n    }\n\n    /**\n     * enable sortable\n     */\n    function applySortable($scope, $element, model, column){\n      // enable drag and drop\n      var el = $element[0];\n      var sortable = Sortable.create(el, {\n        group: 'widgets',\n        handle: '.adf-move',\n        ghostClass: 'placeholder',\n        animation: 150,\n        onAdd: function(evt){\n          addWidgetToColumn($scope, model, column, evt);\n        },\n        onRemove: function(evt){\n          removeWidgetFromColumn($scope, column, evt);\n        },\n        onUpdate: function(evt){\n          moveWidgetInColumn($scope, column, evt);\n        }\n      });\n\n      // destroy sortable on column destroy event\n      $element.on('$destroy', function () {\n        // check sortable element, before calling destroy\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\n        if (sortable.el){\n          sortable.destroy();\n        }\n      });\n    }\n\n    function link($scope, $element) {\n      // set id\n      var col = $scope.column;\n      if (!col.cid){\n        col.cid = dashboard.id();\n      }\n\n      if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\n        // be sure to tell Angular about the injected directive and push the new row directive to the column\n        $compile(rowTemplate)($scope, function(cloned) {\n          $element.append(cloned);\n        });\n      } else {\n        // enable drag and drop for widget only columns\n        applySortable($scope, $element, $scope.adfModel, col);\n      }\n    }\n\n  }]);\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .filter('adfOrderByObjectKey', [\"$filter\", function($filter) {\n    \n\n    return function(item, key){\n      var array = [];\n      angular.forEach(item, function(value, objectKey){\n        value[key] = objectKey;\n        array.push(value);\n      });\n      return $filter('orderBy')(array, key);\n    };\n  }]);\n\nangular.module('adf.structures.base', ['adf'])\r\n    .config([\"dashboardProvider\", function(dashboardProvider){\r\n\r\n        dashboardProvider\r\n            .structure('12', {\r\n                rows: [{\r\n                    columns: [{\r\n                        styleClass: 'col-md-12'\r\n                    }]\r\n                }]\r\n            })\r\n            .structure('6-6', {\r\n                rows: [{\r\n                    columns: [{\r\n                        styleClass: 'col-md-6'\r\n                    }, {\r\n                        styleClass: 'col-md-6'\r\n                    }]\r\n                }]\r\n            })\r\n            .structure('4-8', {\r\n                rows: [{\r\n                    columns: [{\r\n                        styleClass: 'col-md-4',\r\n                        widgets: []\r\n                    }, {\r\n                        styleClass: 'col-md-8',\r\n                        widgets: []\r\n                    }]\r\n                }]\r\n            })\r\n            .structure('12/4-4-4', {\r\n                rows: [{\r\n                    columns: [{\r\n                        styleClass: 'col-md-12'\r\n                    }]\r\n                }, {\r\n                    columns: [{\r\n                        styleClass: 'col-md-4'\r\n                    }, {\r\n                        styleClass: 'col-md-4'\r\n                    }, {\r\n                        styleClass: 'col-md-4'\r\n                    }]\r\n                }]\r\n            })\r\n            .structure('12/6-6', {\r\n                rows: [{\r\n                    columns: [{\r\n                        styleClass: 'col-md-12'\r\n                    }]\r\n                }, {\r\n                    columns: [{\r\n                        styleClass: 'col-md-6'\r\n                    }, {\r\n                        styleClass: 'col-md-6'\r\n                    }]\r\n                }]\r\n            })\r\n            .structure('12/6-6/12', {\r\n                rows: [{\r\n                    columns: [{\r\n                        styleClass: 'col-md-12'\r\n                    }]\r\n                }, {\r\n                    columns: [{\r\n                        styleClass: 'col-md-6'\r\n                    }, {\r\n                        styleClass: 'col-md-6'\r\n                    }]\r\n                }, {\r\n                    columns: [{\r\n                        styleClass: 'col-md-12'\r\n                    }]\r\n                }]\r\n            })\r\n            .structure('3-9 (12/4-4-4)', {\r\n                rows: [{\r\n                    columns: [{\r\n                        styleClass: 'col-md-3'\r\n                    }, {\r\n                        styleClass: 'col-md-9',\r\n                        rows: [{\r\n                            columns: [{\r\n                                styleClass: 'col-md-12'\r\n                            }]\r\n                        }, {\r\n                            columns: [{\r\n                                styleClass: 'col-md-4'\r\n                            }, {\r\n                                styleClass: 'col-md-4'\r\n                            },{\r\n                                styleClass: 'col-md-4'\r\n                            }]\r\n                        }]\r\n                    }]\r\n                }]\r\n            })\r\n            .structure('3-9 (12/6-6)', {\r\n                rows: [{\r\n                    columns: [{\r\n                        styleClass: 'col-md-3'\r\n                    }, {\r\n                        styleClass: 'col-md-9',\r\n                        rows: [{\r\n                            columns: [{\r\n                                styleClass: 'col-md-12'\r\n                            }]\r\n                        }, {\r\n                            columns: [{\r\n                                styleClass: 'col-md-6'\r\n                            }, {\r\n                                styleClass: 'col-md-6'\r\n                            }]\r\n                        }]\r\n                    }]\r\n                }]\r\n            });\r\n\r\n    }]);\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register structures and widgets.\n */\nangular.module('adf.provider', ['adf.locale'])\n  .provider('dashboard', [\"adfLocale\", function(adfLocale){\n\n    var widgets = {};\n    var widgetsPath = '';\n    var structures = {};\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\n    var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\">loading ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n    var customWidgetTemplatePath = null;\n\n    // default apply function of widget.edit.apply\n    var defaultApplyFunction = function(){\n      return true;\n    };\n\n    var activeLocale = adfLocale.defaultLocale;\n    var locales = adfLocale.frameworkLocales;\n\n    function getLocales() {\n      return locales;\n    }\n\n    function getActiveLocale() {\n      return activeLocale;\n    }\n\n    function translate(label) {\n      var translation = locales[activeLocale][label];\n      return translation ? translation : label;\n    }\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#widget\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new widget.\n    *\n    * @param {string} name of the widget\n    * @param {object} widget to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `title` - `{string=}` - The title of the widget.\n    *   - `description` - `{string=}` - Description of the widget.\n    *   - `category` - `{string=}` - Category of the widget.\n    *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\n    *   - `config` - `{object}` - Predefined widget configuration.\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\n    *      associated with newly created scope of the widget or the name of a\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n    *      if passed as a string.\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\n    *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\n    *   - `template` - `{string=|function()=}` - html template as a string.\n    *   - `templateUrl` - `{string=}` - path to an html template.\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the widget\n    *      will wait for them all to be resolved or one to be rejected before the controller is\n    *      instantiated.\n    *      If all the promises are resolved successfully, the values of the resolved promises are\n    *      injected.\n    *\n    *      The map object is:\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n    *        and the return value is treated as the dependency. If the result is a promise, it is\n    *        resolved before its value is injected into the controller.\n    *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n    *      on the scope of the widget.\n    *   - `edit` - `{object}` - Edit modus of the widget.\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n    *        on the scope of the widget.\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n    *        Default is true.\n    *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\n    *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\n    *        The function have to return a boolean or an promise which can be resolved to a boolean.\n    *        The function can use injection.\n    *\n    * @returns {Object} self\n    */\n    this.widget = function(name, widget){\n      var w = angular.extend({reload: false, frameless: false}, widget);\n      if ( w.edit ){\n        var edit = {\n          reload: true,\n          immediate: false,\n          apply: defaultApplyFunction\n        };\n        angular.extend(edit, w.edit);\n        w.edit = edit;\n      }\n      widgets[name] = w;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#widgetsPath\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Sets the path to the directory which contains the widgets. The widgets\n     * path is used for widgets with a templateUrl which contains the\n     * placeholder {widgetsPath}. The placeholder is replaced with the\n     * configured value, before the template is loaded, but the template is\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n     * The default value of widgetPaths is ''.\n     *\n     *\n     * @param {string} path to the directory which contains the widgets\n     *\n     * @returns {Object} self\n     */\n    this.widgetsPath = function(path){\n      widgetsPath = path;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#structure\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new structure.\n    *\n    * @param {string} name of the structure\n    * @param {object} structure to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\n    *     - `styleClass` - `{string}` - CSS Class of the row.\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\n    *       - `styleClass` - `{string}` - CSS Class of the column.\n    *\n    * @returns {Object} self\n    */\n    this.structure = function(name, structure){\n      structures[name] = structure;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#messageTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template for messages.\n    *\n    * @param {string} template for messages.\n    *\n    * @returns {Object} self\n    */\n    this.messageTemplate = function(template){\n      messageTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#loadingTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template which is displayed as\n    * long as the widget resources are not resolved.\n    *\n    * @param {string} template loading template\n    *\n    * @returns {Object} self\n    */\n    this.loadingTemplate = function(template){\n      loadingTemplate = template;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#customWidgetTemplatePath\n     * @propertyOf adf.dashboardProvider\n     * @description\n     *\n     * Changes the container template for the widgets\n     *\n     * @param {string} path to the custom widget template\n     *\n     * @returns {Object} self\n     */\n    this.customWidgetTemplatePath = function(templatePath) {\n      customWidgetTemplatePath = templatePath;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#setLocale\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Changes the locale setting of adf\n     *\n     * @param {string} ISO Language Code\n     *\n     * @returns {Object} self\n     */\n     this.setLocale = function(locale){\n       if(locales[locale]) {\n         activeLocale = locale;\n       } else {\n         throw new Error('Cannot set locale: ' + locale + '. Locale is not defined.');\n       }\n       return this;\n     };\n\n     /**\n      * @ngdoc method\n      * @name adf.dashboardProvider#addLocale\n      * @methodOf adf.dashboardProvider\n      * @description\n      *\n      * Adds a new locale to adf\n      *\n      * @param {string} ISO Language Code for the new locale\n      * @param {object} translations for the locale.\n      *\n      * @returns {Object} self\n      */\n      this.addLocale = function(locale, translations){\n        if(!angular.isString(locale)) {\n          throw new Error('locale must be an string');\n        }\n\n        if(!angular.isObject(translations)) {\n          throw new Error('translations must be an object');\n        }\n\n        locales[locale] = translations;\n        return this;\n      };\n\n   /**\n    * @ngdoc service\n    * @name adf.dashboard\n    * @description\n    *\n    * The dashboard holds all options, structures and widgets.\n    *\n    * @property {Array.<Object>} widgets Array of registered widgets.\n    * @property {string} widgetsPath Default path for widgets.\n    * @property {Array.<Object>} structures Array of registered structures.\n    * @property {string} messageTemplate Template for messages.\n    * @property {string} loadingTemplate Template for widget loading.\n    * @property {method} sets locale of adf.\n    * @property {Array.<Object>} hold all of the locale translations.\n    * @property {string} the active locale setting.\n    * @property {method} translation function passed to templates.\n    *\n    * @returns {Object} self\n    */\n    this.$get = function(){\n      var cid = 0;\n\n      return {\n        widgets: widgets,\n        widgetsPath: widgetsPath,\n        structures: structures,\n        messageTemplate: messageTemplate,\n        loadingTemplate: loadingTemplate,\n        setLocale: this.setLocale,\n        locales: getLocales,\n        activeLocale: getActiveLocale,\n        translate: translate,\n        customWidgetTemplatePath: customWidgetTemplatePath,\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#id\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Creates an ongoing numeric id. The method is used to create ids for\n         * columns and widgets in the dashboard.\n         */\n        id: function(){\n          return new Date().getTime() + '-' + (++cid);\n        },\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#idEqual\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Checks if the given ids are equal.\n         *\n         * @param {string} id widget or column id\n         * @param {string} other widget or column id\n         */\n         idEquals: function(id, other){\n           // use toString, because old ids are numbers\n           return ((id) && (other)) && (id.toString() === other.toString());\n         }\n      };\n    };\n\n  }]);\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf.locale', [])\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n\n/**\n* @ngdoc object\n* @name adf.locale#adfLocale\n* @description\n*\n* Holds settings and values for framework supported locales\n*/\nangular.module('adf.locale')\n.constant('adfLocale',\n  {\n    defaultLocale: 'pt-BR',\n    frameworkLocales: {\n      'en-GB': {\n        ADF_COMMON_CLOSE: 'Close',\n        ADF_COMMON_DELETE: 'Delete',\n        ADF_COMMON_TITLE: 'Title',\n        ADF_COMMON_CANCEL: 'Cancel',\n        ADF_COMMON_APPLY: 'Apply',\n        ADF_COMMON_EDIT_DASHBOARD: 'Edit dashboard',\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Structure',\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Add new widget',\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Save changes',\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Enable edit mode',\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Undo changes',\n        ADF_WIDGET_ADD_HEADER: 'Add new widget',\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Are you sure you want to delete this widget ?',\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Reload widget Content',\n        ADF_WIDGET_TOOLTIP_MOVE: 'Change widget location',\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Collapse widget',\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Expand widget',\n        ADF_WIDGET_TOOLTIP_EDIT: 'Edit widget configuration',\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Fullscreen widget',\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Remove widget'\n      },\n      'pt-BR': {\n        ADF_COMMON_CLOSE: 'Fechar',\n        ADF_COMMON_DELETE: 'Delete',\n        ADF_COMMON_TITLE: 'Título',\n        ADF_COMMON_CANCEL: 'Cancelar',\n        ADF_COMMON_APPLY: 'Aplicar',\n        ADF_COMMON_EDIT_DASHBOARD: 'Editar Dashboard',\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Estrutura',\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Adicionar Widget',\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Salvar Alterções',\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Ativar Edição',\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Desfazer Alterações',\n        ADF_WIDGET_ADD_HEADER: 'Adicionar Widget',\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Tem certeza que deseja remover este Widget?',\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Recarregar',\n        ADF_WIDGET_TOOLTIP_MOVE: 'Mover Widget',\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Minimizar Widget',\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Maximizar Widget',\n        ADF_WIDGET_TOOLTIP_EDIT: 'Editar Configurações do Widget',\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Tela Cheia',\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Remover Widget'\n      }\n    }\n  }\n);\n\n})(window);","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf')\n  .directive('adfWidgetContent', function($log, $q, widgetService, $compile, $controller, $injector, dashboard) {\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      scope: {\n        adfModel: '=',\n        model: '=',\n        content: '='\n      },\n      link: link\n    };\n\n    function renderError($element, msg){\n        $log.warn(msg);\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n    }\n\n    function compileWidget($scope, $element, currentScope) {\n      var model = $scope.model;\n      var content = $scope.content;\n\n      var newScope = currentScope;\n      if (!model){\n        renderError($element, 'model is undefined')\n      } else if (!content){\n        var msg = 'widget content is undefined, please have a look at your browser log';\n        renderError($element, msg);\n      } else {\n        newScope = renderWidget($scope, $element, currentScope, model, content);\n      }\n      return newScope;\n    }\n\n    function renderWidget($scope, $element, currentScope, model, content) {\n      // display loading template\n      $element.html(dashboard.loadingTemplate);\n\n      // create new scope\n      var templateScope = $scope.$new();\n\n      // pass config object to scope\n      if (!model.config) {\n        model.config = {};\n      }\n\n      templateScope.config = model.config;\n\n      // local injections\n      var base = {\n        $scope: templateScope,\n        widget: model,\n        config: model.config\n      };\n\n      // get resolve promises from content object\n      var resolvers = {};\n      resolvers.$tpl = widgetService.getTemplate(content);\n      if (content.resolve) {\n        angular.forEach(content.resolve, function(promise, key) {\n          if (angular.isString(promise)) {\n            resolvers[key] = $injector.get(promise);\n          } else {\n            resolvers[key] = $injector.invoke(promise, promise, base);\n          }\n        });\n      }\n\n      // resolve all resolvers\n      $q.all(resolvers).then(function(locals) {\n        angular.extend(locals, base);\n\n        // pass resolve map to template scope as defined in resolveAs\n        if (content.resolveAs){\n          templateScope[content.resolveAs] = locals;\n        }\n\n        // compile & render template\n        var template = locals.$tpl;\n        $element.html(template);\n        if (content.controller) {\n          var templateCtrl = $controller(content.controller, locals);\n          if (content.controllerAs) {\n            templateScope[content.controllerAs] = templateCtrl;\n          }\n          $element.children().data('$ngControllerController', templateCtrl);\n        }\n        $compile($element.contents())(templateScope);\n      }, function(reason) {\n        // handle promise rejection\n        var msg = 'Could not resolve all promises';\n        if (reason) {\n          msg += ': ' + reason;\n        }\n        renderError($element, msg);\n      });\n\n      // destroy old scope\n      if (currentScope) {\n        currentScope.$destroy();\n      }\n\n      return templateScope;\n    }\n\n    function link($scope, $element) {\n      var currentScope = compileWidget($scope, $element, null);\n      $scope.$on('widgetConfigChanged', function() {\n        currentScope = compileWidget($scope, $element, currentScope);\n      });\n      $scope.$on('widgetReload', function() {\n        currentScope = compileWidget($scope, $element, currentScope);\n      });\n    }\n\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n/* global angular */\nangular.module('adf')\n  .directive('adfStructurePreview', function(adfTemplatePath, adfStructurePreviewService) {\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        name: '=',\n        structure: '=',\n        selected: '='\n      },\n      templateUrl: adfTemplatePath + 'structure-preview.html',\n      link: link\n    };\n\n    function link($scope){\n      var structure = angular.copy($scope.structure);\n      adfStructurePreviewService.adjustRowHeight(structure);\n      $scope.preview = structure;\n    }\n\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {string=} structure the default structure of the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\n *                   events during edit mode not reset it if edit mode is exited.\n * @param {boolean=} categories enable categories for the add widget dialog.\n */\n\nangular.module('adf')\n  .directive('adfDashboard', function ($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, adfDashboardService, adfUtilsService) {\n    'use strict';\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude : false,\n      scope: {\n        structure: '@',\n        name: '@',\n        collapsible: '@',\n        editable: '@',\n        editMode: '@',\n        continuousEditMode: '=',\n        maximizable: '@',\n        adfModel: '=',\n        adfWidgetFilter: '=',\n        categories: '@'\n      },\n      controller: controller,\n      link: link,\n      templateUrl: adfTemplatePath + 'dashboard.html'\n    };\n\n    /**\n     * Opens the edit mode of the specified widget.\n     *\n     * @param dashboard scope\n     * @param widget\n     */\n    function _openEditMode($scope, widget){\n      // wait some time before fire enter edit mode event\n      $timeout(function(){\n        $scope.$broadcast('adfWidgetEnterEditMode', widget);\n      }, 200);\n    }\n\n    /**\n     * Directive controller function.\n     *\n     * @param dashboard scope\n     */\n    function controller($scope){\n      var model = {};\n      var structure = {};\n      var widgetFilter = null;\n      var structureName = {};\n      var name = $scope.name;\n\n      // Watching for changes on adfModel\n      $scope.$watch('adfModel', function(oldVal, newVal) {\n       // has model changed or is the model attribute not set\n       if (newVal !== null || (oldVal === null && newVal === null)) {\n         model = $scope.adfModel;\n         widgetFilter = $scope.adfWidgetFilter;\n         if ( ! model || ! model.rows ){\n           structureName = $scope.structure;\n           structure = dashboard.structures[structureName];\n           if (structure){\n             if (model){\n               model.rows = angular.copy(structure).rows;\n             } else {\n               model = angular.copy(structure);\n             }\n             model.structure = structureName;\n           } else {\n             $log.error( 'could not find structure ' + structureName);\n           }\n         }\n\n         if (model) {\n           if (!model.title){\n             model.title = 'Dashboard';\n           }\n           if (!model.titleTemplateUrl) {\n             model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\n           }\n           $scope.model = model;\n         } else {\n           $log.error('could not find or create model');\n         }\n       }\n      }, true);\n\n      // edit mode\n      $scope.editMode = false;\n      $scope.editClass = '';\n\n      //passs translate function from dashboard so we can translate labels inside html templates\n      $scope.translate = dashboard.translate;\n\n      function getNewModalScope() {\n       var scope = $scope.$new();\n       //pass translate function to the new scope so we can translate the labels inside the modal dialog\n       scope.translate = dashboard.translate;\n       return scope;\n      }\n\n      $scope.toggleEditMode = function(){\n       $scope.editMode = ! $scope.editMode;\n       if ($scope.editMode){\n         if (!$scope.continuousEditMode) {\n           $scope.modelCopy = angular.copy($scope.adfModel, {});\n           $rootScope.$broadcast('adfIsEditMode');\n         }\n       }\n\n       if (!$scope.editMode){\n         $rootScope.$broadcast('adfDashboardChanged', name, model);\n       }\n      };\n\n      $scope.$on('adfToggleEditMode', function() {\n         $scope.toggleEditMode();\n      });\n\n      $scope.collapseAll = function(collapseExpandStatus){\n       $rootScope.$broadcast('adfDashboardCollapseExpand',{collapseExpandStatus : collapseExpandStatus});\n      };\n\n      $scope.cancelEditMode = function(){\n       $scope.editMode = false;\n       if (!$scope.continuousEditMode) {\n         $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n       }\n       $rootScope.$broadcast('adfDashboardEditsCancelled');\n      };\n\n      // edit dashboard settings\n      $scope.editDashboardDialog = function(){\n       var editDashboardScope = getNewModalScope();\n       // create a copy of the title, to avoid changing the title to\n       // \"dashboard\" if the field is empty\n       editDashboardScope.copy = {\n         title: model.title\n       };\n\n       // pass dashboard structure to scope\n       editDashboardScope.structures = dashboard.structures;\n\n       // pass split function to scope, to be able to display structures in multiple columns\n       editDashboardScope.split = adfUtilsService.split;\n\n       var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\n       if(model.editTemplateUrl) {\n         adfEditTemplatePath = model.editTemplateUrl;\n       }\n       var instance = $uibModal.open({\n         scope: editDashboardScope,\n         templateUrl: adfEditTemplatePath,\n         backdrop: 'static',\n         windowClass: 'adf-edit-dashboard-modal',\n         size: 'lg'\n       });\n       editDashboardScope.changeStructure = function(name, structure){\n         $log.info('change structure to ' + name);\n         adfDashboardService.changeStructure(model, structure);\n         if (model.structure !== name){\n           model.structure = name;\n         }\n       };\n       editDashboardScope.closeDialog = function(){\n         // copy the new title back to the model\n         model.title = editDashboardScope.copy.title;\n         // close modal and destroy the scope\n         instance.close();\n         editDashboardScope.$destroy();\n       };\n      };\n\n      // add widget dialog\n      $scope.addWidgetDialog = function(){\n       var addScope = getNewModalScope();\n       var model = $scope.model;\n       var widgets;\n       if (angular.isFunction(widgetFilter)){\n         widgets = {};\n         angular.forEach(dashboard.widgets, function(widget, type){\n           if (widgetFilter(widget, type, model)){\n             widgets[type] = widget;\n           }\n         });\n       } else {\n         widgets = dashboard.widgets;\n       }\n       addScope.widgets = widgets;\n\n       //pass translate function to the new scope so we can translate the labels inside the modal dialog\n       addScope.translate = $scope.translate;\n\n       // pass createCategories function to scope, if categories option is enabled\n       if ($scope.options.categories){\n         $scope.createCategories = adfDashboardService.createCategories;\n       }\n\n       var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n       if(model.addTemplateUrl) {\n         adfAddTemplatePath = model.addTemplateUrl;\n       }\n\n       var opts = {\n         scope: addScope,\n         templateUrl: adfAddTemplatePath,\n         windowClass: 'adf-add-widget-modal',\n         backdrop: 'static'\n       };\n\n       var instance = $uibModal.open(opts);\n       addScope.addWidget = function(widget){\n         var w = {\n           type: widget,\n           config: adfDashboardService.createConfiguration(widget)\n         };\n         adfDashboardService.addNewWidgetToModel(model, w, name);\n         // close and destroy\n         instance.close();\n         addScope.$destroy();\n\n         // check for open edit mode immediately\n         if (adfDashboardService.isEditModeImmediate(widget)){\n           _openEditMode($scope, w);\n         }\n       };\n       addScope.closeDialog = function(){\n         // close and destroy\n         instance.close();\n         addScope.$destroy();\n       };\n      };\n\n      $scope.addNewWidgetToModel = adfDashboardService.addNewWidgetToModel;\n    }\n\n    /**\n     * Directive link function.\n     *\n     * @param dashboard scope\n     * @param directive DOM element\n     * @param directive attributes\n     */\n    function link($scope, $element, $attr) {\n      // pass options to scope\n      var options = {\n        name: $attr.name,\n        editable: true,\n        enableConfirmDelete: adfUtilsService.stringToBoolean($attr.enableConfirmDelete),\n        maximizable: adfUtilsService.stringToBoolean($attr.maximizable),\n        collapsible: adfUtilsService.stringToBoolean($attr.collapsible),\n        categories: adfUtilsService.stringToBoolean($attr.categories)\n      };\n      if (angular.isDefined($attr.editable)){\n        options.editable = adfUtilsService.stringToBoolean($attr.editable);\n      }\n      $scope.options = options;\n    }\n  });\n","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\n    'use strict';\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        row: '=',\n        adfModel: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\n      link: link\n    };\n\n    function link($scope, $element) {\n      if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\n        $compile(columnTemplate)($scope, function(cloned) {\n          $element.append(cloned);\n        });\n      }\n    }\n  });\n","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardColumn', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\n    'use strict';\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        adfModel: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\n      link: link\n    };\n\n    /**\n     * moves a widget in between a column\n     */\n    function moveWidgetInColumn($scope, column, evt){\n      var widgets = column.widgets;\n      // move widget and apply to scope\n      $scope.$apply(function(){\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\n      });\n    }\n\n    /**\n     * finds a widget by its id in the column\n     */\n    function findWidget(column, index){\n      var widget = null;\n      for (var i=0; i<column.widgets.length; i++){\n        var w = column.widgets[i];\n        if (dashboard.idEquals(w.wid,index)){\n          widget = w;\n          break;\n        }\n      }\n      return widget;\n    }\n\n    /**\n     * finds a column by its id in the model\n     */\n    function findColumn(model, index){\n      var column = null;\n      for (var i=0; i<model.rows.length; i++){\n        var r = model.rows[i];\n        for (var j=0; j<r.columns.length; j++){\n          var c = r.columns[j];\n          if (dashboard.idEquals(c.cid, index)){\n            column = c;\n            break;\n          } else if (c.rows){\n            column = findColumn(c, index);\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * get the adf id from an html element\n     */\n    function getId(el){\n      var id = el.getAttribute('adf-id');\n      return id ? id : '-1';\n    }\n\n    /**\n     * adds a widget to a column\n     */\n    function addWidgetToColumn($scope, model, targetColumn, evt){\n      // find source column\n      var cid = getId(evt.from);\n      var sourceColumn = findColumn(model, cid);\n\n      if (sourceColumn){\n        // find moved widget\n        var wid = getId(evt.item);\n        var widget = findWidget(sourceColumn, wid);\n\n        if (widget){\n          // add new item and apply to scope\n          $scope.$apply(function(){\n            if (!targetColumn.widgets) {\n              targetColumn.widgets = [];\n            }\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\n\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\n          });\n        } else {\n          $log.warn('could not find widget with id ' + wid);\n        }\n      } else {\n        $log.warn('could not find column with id ' + cid);\n      }\n    }\n\n    /**\n     * removes a widget from a column\n     */\n    function removeWidgetFromColumn($scope, column, evt){\n      // remove old item and apply to scope\n      $scope.$apply(function(){\n        column.widgets.splice(evt.oldIndex, 1);\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n      });\n    }\n\n    /**\n     * enable sortable\n     */\n    function applySortable($scope, $element, model, column){\n      // enable drag and drop\n      var el = $element[0];\n      var sortable = Sortable.create(el, {\n        group: 'widgets',\n        handle: '.adf-move',\n        ghostClass: 'placeholder',\n        animation: 150,\n        onAdd: function(evt){\n          addWidgetToColumn($scope, model, column, evt);\n        },\n        onRemove: function(evt){\n          removeWidgetFromColumn($scope, column, evt);\n        },\n        onUpdate: function(evt){\n          moveWidgetInColumn($scope, column, evt);\n        }\n      });\n\n      // destroy sortable on column destroy event\n      $element.on('$destroy', function () {\n        // check sortable element, before calling destroy\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\n        if (sortable.el){\n          sortable.destroy();\n        }\n      });\n    }\n\n    function link($scope, $element) {\n      // set id\n      var col = $scope.column;\n      if (!col.cid){\n        col.cid = dashboard.id();\n      }\n\n      if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\n        // be sure to tell Angular about the injected directive and push the new row directive to the column\n        $compile(rowTemplate)($scope, function(cloned) {\n          $element.append(cloned);\n        });\n      } else {\n        // enable drag and drop for widget only columns\n        applySortable($scope, $element, $scope.adfModel, col);\n      }\n    }\n\n  });\n","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .filter('adfOrderByObjectKey', function($filter) {\n    'use strict';\n\n    return function(item, key){\n      var array = [];\n      angular.forEach(item, function(value, objectKey){\n        value[key] = objectKey;\n        array.push(value);\n      });\n      return $filter('orderBy')(array, key);\n    };\n  });\n","angular.module('adf.structures.base', ['adf'])\r\n    .config(function(dashboardProvider){\r\n\r\n        dashboardProvider\r\n            .structure('12', {\r\n                rows: [{\r\n                    columns: [{\r\n                        styleClass: 'col-md-12'\r\n                    }]\r\n                }]\r\n            })\r\n            .structure('6-6', {\r\n                rows: [{\r\n                    columns: [{\r\n                        styleClass: 'col-md-6'\r\n                    }, {\r\n                        styleClass: 'col-md-6'\r\n                    }]\r\n                }]\r\n            })\r\n            .structure('4-8', {\r\n                rows: [{\r\n                    columns: [{\r\n                        styleClass: 'col-md-4',\r\n                        widgets: []\r\n                    }, {\r\n                        styleClass: 'col-md-8',\r\n                        widgets: []\r\n                    }]\r\n                }]\r\n            })\r\n            .structure('12/4-4-4', {\r\n                rows: [{\r\n                    columns: [{\r\n                        styleClass: 'col-md-12'\r\n                    }]\r\n                }, {\r\n                    columns: [{\r\n                        styleClass: 'col-md-4'\r\n                    }, {\r\n                        styleClass: 'col-md-4'\r\n                    }, {\r\n                        styleClass: 'col-md-4'\r\n                    }]\r\n                }]\r\n            })\r\n            .structure('12/6-6', {\r\n                rows: [{\r\n                    columns: [{\r\n                        styleClass: 'col-md-12'\r\n                    }]\r\n                }, {\r\n                    columns: [{\r\n                        styleClass: 'col-md-6'\r\n                    }, {\r\n                        styleClass: 'col-md-6'\r\n                    }]\r\n                }]\r\n            })\r\n            .structure('12/6-6/12', {\r\n                rows: [{\r\n                    columns: [{\r\n                        styleClass: 'col-md-12'\r\n                    }]\r\n                }, {\r\n                    columns: [{\r\n                        styleClass: 'col-md-6'\r\n                    }, {\r\n                        styleClass: 'col-md-6'\r\n                    }]\r\n                }, {\r\n                    columns: [{\r\n                        styleClass: 'col-md-12'\r\n                    }]\r\n                }]\r\n            })\r\n            .structure('3-9 (12/4-4-4)', {\r\n                rows: [{\r\n                    columns: [{\r\n                        styleClass: 'col-md-3'\r\n                    }, {\r\n                        styleClass: 'col-md-9',\r\n                        rows: [{\r\n                            columns: [{\r\n                                styleClass: 'col-md-12'\r\n                            }]\r\n                        }, {\r\n                            columns: [{\r\n                                styleClass: 'col-md-4'\r\n                            }, {\r\n                                styleClass: 'col-md-4'\r\n                            },{\r\n                                styleClass: 'col-md-4'\r\n                            }]\r\n                        }]\r\n                    }]\r\n                }]\r\n            })\r\n            .structure('3-9 (12/6-6)', {\r\n                rows: [{\r\n                    columns: [{\r\n                        styleClass: 'col-md-3'\r\n                    }, {\r\n                        styleClass: 'col-md-9',\r\n                        rows: [{\r\n                            columns: [{\r\n                                styleClass: 'col-md-12'\r\n                            }]\r\n                        }, {\r\n                            columns: [{\r\n                                styleClass: 'col-md-6'\r\n                            }, {\r\n                                styleClass: 'col-md-6'\r\n                            }]\r\n                        }]\r\n                    }]\r\n                }]\r\n            });\r\n\r\n    });","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register structures and widgets.\n */\nangular.module('adf.provider', ['adf.locale'])\n  .provider('dashboard', function(adfLocale){\n\n    var widgets = {};\n    var widgetsPath = '';\n    var structures = {};\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\n    var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\">loading ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n    var customWidgetTemplatePath = null;\n\n    // default apply function of widget.edit.apply\n    var defaultApplyFunction = function(){\n      return true;\n    };\n\n    var activeLocale = adfLocale.defaultLocale;\n    var locales = adfLocale.frameworkLocales;\n\n    function getLocales() {\n      return locales;\n    }\n\n    function getActiveLocale() {\n      return activeLocale;\n    }\n\n    function translate(label) {\n      var translation = locales[activeLocale][label];\n      return translation ? translation : label;\n    }\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#widget\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new widget.\n    *\n    * @param {string} name of the widget\n    * @param {object} widget to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `title` - `{string=}` - The title of the widget.\n    *   - `description` - `{string=}` - Description of the widget.\n    *   - `category` - `{string=}` - Category of the widget.\n    *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\n    *   - `config` - `{object}` - Predefined widget configuration.\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\n    *      associated with newly created scope of the widget or the name of a\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n    *      if passed as a string.\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\n    *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\n    *   - `template` - `{string=|function()=}` - html template as a string.\n    *   - `templateUrl` - `{string=}` - path to an html template.\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the widget\n    *      will wait for them all to be resolved or one to be rejected before the controller is\n    *      instantiated.\n    *      If all the promises are resolved successfully, the values of the resolved promises are\n    *      injected.\n    *\n    *      The map object is:\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n    *        and the return value is treated as the dependency. If the result is a promise, it is\n    *        resolved before its value is injected into the controller.\n    *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n    *      on the scope of the widget.\n    *   - `edit` - `{object}` - Edit modus of the widget.\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n    *        on the scope of the widget.\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n    *        Default is true.\n    *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\n    *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\n    *        The function have to return a boolean or an promise which can be resolved to a boolean.\n    *        The function can use injection.\n    *\n    * @returns {Object} self\n    */\n    this.widget = function(name, widget){\n      var w = angular.extend({reload: false, frameless: false}, widget);\n      if ( w.edit ){\n        var edit = {\n          reload: true,\n          immediate: false,\n          apply: defaultApplyFunction\n        };\n        angular.extend(edit, w.edit);\n        w.edit = edit;\n      }\n      widgets[name] = w;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#widgetsPath\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Sets the path to the directory which contains the widgets. The widgets\n     * path is used for widgets with a templateUrl which contains the\n     * placeholder {widgetsPath}. The placeholder is replaced with the\n     * configured value, before the template is loaded, but the template is\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n     * The default value of widgetPaths is ''.\n     *\n     *\n     * @param {string} path to the directory which contains the widgets\n     *\n     * @returns {Object} self\n     */\n    this.widgetsPath = function(path){\n      widgetsPath = path;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#structure\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new structure.\n    *\n    * @param {string} name of the structure\n    * @param {object} structure to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\n    *     - `styleClass` - `{string}` - CSS Class of the row.\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\n    *       - `styleClass` - `{string}` - CSS Class of the column.\n    *\n    * @returns {Object} self\n    */\n    this.structure = function(name, structure){\n      structures[name] = structure;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#messageTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template for messages.\n    *\n    * @param {string} template for messages.\n    *\n    * @returns {Object} self\n    */\n    this.messageTemplate = function(template){\n      messageTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#loadingTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template which is displayed as\n    * long as the widget resources are not resolved.\n    *\n    * @param {string} template loading template\n    *\n    * @returns {Object} self\n    */\n    this.loadingTemplate = function(template){\n      loadingTemplate = template;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#customWidgetTemplatePath\n     * @propertyOf adf.dashboardProvider\n     * @description\n     *\n     * Changes the container template for the widgets\n     *\n     * @param {string} path to the custom widget template\n     *\n     * @returns {Object} self\n     */\n    this.customWidgetTemplatePath = function(templatePath) {\n      customWidgetTemplatePath = templatePath;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#setLocale\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Changes the locale setting of adf\n     *\n     * @param {string} ISO Language Code\n     *\n     * @returns {Object} self\n     */\n     this.setLocale = function(locale){\n       if(locales[locale]) {\n         activeLocale = locale;\n       } else {\n         throw new Error('Cannot set locale: ' + locale + '. Locale is not defined.');\n       }\n       return this;\n     };\n\n     /**\n      * @ngdoc method\n      * @name adf.dashboardProvider#addLocale\n      * @methodOf adf.dashboardProvider\n      * @description\n      *\n      * Adds a new locale to adf\n      *\n      * @param {string} ISO Language Code for the new locale\n      * @param {object} translations for the locale.\n      *\n      * @returns {Object} self\n      */\n      this.addLocale = function(locale, translations){\n        if(!angular.isString(locale)) {\n          throw new Error('locale must be an string');\n        }\n\n        if(!angular.isObject(translations)) {\n          throw new Error('translations must be an object');\n        }\n\n        locales[locale] = translations;\n        return this;\n      };\n\n   /**\n    * @ngdoc service\n    * @name adf.dashboard\n    * @description\n    *\n    * The dashboard holds all options, structures and widgets.\n    *\n    * @property {Array.<Object>} widgets Array of registered widgets.\n    * @property {string} widgetsPath Default path for widgets.\n    * @property {Array.<Object>} structures Array of registered structures.\n    * @property {string} messageTemplate Template for messages.\n    * @property {string} loadingTemplate Template for widget loading.\n    * @property {method} sets locale of adf.\n    * @property {Array.<Object>} hold all of the locale translations.\n    * @property {string} the active locale setting.\n    * @property {method} translation function passed to templates.\n    *\n    * @returns {Object} self\n    */\n    this.$get = function(){\n      var cid = 0;\n\n      return {\n        widgets: widgets,\n        widgetsPath: widgetsPath,\n        structures: structures,\n        messageTemplate: messageTemplate,\n        loadingTemplate: loadingTemplate,\n        setLocale: this.setLocale,\n        locales: getLocales,\n        activeLocale: getActiveLocale,\n        translate: translate,\n        customWidgetTemplatePath: customWidgetTemplatePath,\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#id\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Creates an ongoing numeric id. The method is used to create ids for\n         * columns and widgets in the dashboard.\n         */\n        id: function(){\n          return new Date().getTime() + '-' + (++cid);\n        },\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#idEqual\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Checks if the given ids are equal.\n         *\n         * @param {string} id widget or column id\n         * @param {string} other widget or column id\n         */\n         idEquals: function(id, other){\n           // use toString, because old ids are numbers\n           return ((id) && (other)) && (id.toString() === other.toString());\n         }\n      };\n    };\n\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf.locale', [])\n","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n'use strict';\n\n/**\n* @ngdoc object\n* @name adf.locale#adfLocale\n* @description\n*\n* Holds settings and values for framework supported locales\n*/\nangular.module('adf.locale')\n.constant('adfLocale',\n  {\n    defaultLocale: 'pt-BR',\n    frameworkLocales: {\n      'en-GB': {\n        ADF_COMMON_CLOSE: 'Close',\n        ADF_COMMON_DELETE: 'Delete',\n        ADF_COMMON_TITLE: 'Title',\n        ADF_COMMON_CANCEL: 'Cancel',\n        ADF_COMMON_APPLY: 'Apply',\n        ADF_COMMON_EDIT_DASHBOARD: 'Edit dashboard',\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Structure',\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Add new widget',\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Save changes',\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Enable edit mode',\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Undo changes',\n        ADF_WIDGET_ADD_HEADER: 'Add new widget',\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Are you sure you want to delete this widget ?',\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Reload widget Content',\n        ADF_WIDGET_TOOLTIP_MOVE: 'Change widget location',\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Collapse widget',\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Expand widget',\n        ADF_WIDGET_TOOLTIP_EDIT: 'Edit widget configuration',\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Fullscreen widget',\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Remove widget'\n      },\n      'pt-BR': {\n        ADF_COMMON_CLOSE: 'Fechar',\n        ADF_COMMON_DELETE: 'Delete',\n        ADF_COMMON_TITLE: 'Título',\n        ADF_COMMON_CANCEL: 'Cancelar',\n        ADF_COMMON_APPLY: 'Aplicar',\n        ADF_COMMON_EDIT_DASHBOARD: 'Editar Dashboard',\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Estrutura',\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Adicionar Widget',\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Salvar Alterções',\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Ativar Edição',\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Desfazer Alterações',\n        ADF_WIDGET_ADD_HEADER: 'Adicionar Widget',\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Tem certeza que deseja remover este Widget?',\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Recarregar',\n        ADF_WIDGET_TOOLTIP_MOVE: 'Mover Widget',\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Minimizar Widget',\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Maximizar Widget',\n        ADF_WIDGET_TOOLTIP_EDIT: 'Editar Configurações do Widget',\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Tela Cheia',\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Remover Widget'\n      }\n    }\n  }\n);\n","(function(window, undefined) {'use strict';\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf', ['adf.provider', 'adf.locale', 'ui.bootstrap'])\n  .value('adfTemplatePath', '../src/templates/')\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\n  .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n  .value('adfVersion', '0.13.0-SNAPSHOT');\n\nangular.module(\"adf\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-column.html\",\"<div adf-id={{column.cid}} class=column ng-class=column.styleClass ng-model=column.widgets> <adf-widget ng-repeat=\\\"definition in column.widgets\\\" adf-model=adfModel definition=definition column=column edit-mode=editMode options=options widget-state=widgetState>  </adf-widget></div> \");\n$templateCache.put(\"../src/templates/dashboard-edit.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title ng-bind=\\\"translate(\\'ADF_COMMON_EDIT_DASHBOARD\\')\\\">Edit Dashboard</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=dashboardTitle ng-bind=\\\"translate(\\'ADF_COMMON_TITLE\\')\\\">Title</label> <input type=text class=form-control id=dashboardTitle ng-model=copy.title required> </div> <div class=form-group> <label ng-bind=\\\"translate(\\'ADF_EDIT_DASHBOARD_STRUCTURE_LABEL\\')\\\">Structure</label> <div class=row ng-init=\\\"splitted = split(structures, 3)\\\"> <div class=col-lg-4 ng-repeat=\\\"structureColumn in splitted\\\"> <div class=radio ng-repeat=\\\"(key, structure) in structureColumn\\\"> <div class=row> <div class=col-sm-2> <label> <input type=radio value={{key}} ng-model=model.structure ng-change=\\\"changeStructure(key, structure)\\\"> </label> </div> <div class=col-sm-9 ng-click=\\\"changeStructure(key, structure)\\\"> <adf-structure-preview name=key structure=structure selected=\\\"model.structure == key\\\"> </adf-structure-preview> </div> </div> </div> </div> </div> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div> \");\n$templateCache.put(\"../src/templates/dashboard-row.html\",\"<div class=row ng-class=row.styleClass ng-style=row.style>  </div> \");\n$templateCache.put(\"../src/templates/dashboard-title.html\",\"<h1> {{model.title}} <span style=\\\"font-size: 16px\\\" class=pull-right> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_ADD\\') }}\\\" ng-click=addWidgetDialog()> <i class=\\\"glyphicon glyphicon-plus-sign\\\"></i> </a> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_COMMON_EDIT_DASHBOARD\\') }}\\\" ng-click=editDashboardDialog()> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href ng-if=options.editable title=\\\"{{editMode ? translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_SAVE\\') : translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE\\') }}\\\" ng-click=toggleEditMode()> <i class=glyphicon x-ng-class=\\\"{\\'glyphicon-edit\\' : !editMode, \\'glyphicon-save\\' : editMode}\\\"></i> </a> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_UNDO\\') }}\\\" ng-click=cancelEditMode()> <i class=\\\"glyphicon glyphicon-repeat adf-flip\\\"></i> </a> </span> </h1> \");\n$templateCache.put(\"../src/templates/dashboard.html\",\"<div class=dashboard-container> <div ng-include src=model.titleTemplateUrl></div> <div class=dashboard x-ng-class=\\\"{\\'edit\\' : editMode}\\\"> <adf-dashboard-row row=row adf-model=model options=options ng-repeat=\\\"row in model.rows\\\" edit-mode=editMode continuous-edit-mode=continuousEditMode> </adf-dashboard-row></div> </div> \");\n$templateCache.put(\"../src/templates/structure-preview.html\",\"<div class=structure-preview ng-class=\\\"{selected: selected}\\\"> <h4>{{name}}</h4> <adf-dashboard-row ng-repeat=\\\"row in preview.rows\\\" row=row> </adf-dashboard-row></div> \");\n$templateCache.put(\"../src/templates/widget-add.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title ng-bind=\\\"translate(\\'ADF_WIDGET_ADD_HEADER\\')\\\">Add new widget</h4> </div> <div class=modal-body>  <div ng-if=createCategories> <uib-tabset ng-init=\\\"categorized = createCategories(widgets)\\\"> <uib-tab heading={{category.name}} ng-repeat=\\\"category in categorized | adfOrderByObjectKey: \\'name\\'\\\"> <dl class=dl-horizontal style=\\\"margin-top: 10px;\\\"> <dt ng-repeat-start=\\\"widget in category.widgets | adfOrderByObjectKey: \\'key\\'\\\"> <a href ng-click=addWidget(widget.key)> {{widget.title}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description}} </dd> </dl> </uib-tab> </uib-tabset> </div>  <div style=\\\"display: inline-block;\\\" ng-if=!createCategories> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"widget in widgets | adfOrderByObjectKey: \\'key\\'\\\"> <a href ng-click=addWidget(widget.key)> {{widget.title}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description}} </dd> </dl> </div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div> \");\n$templateCache.put(\"../src/templates/widget-delete.html\",\"<div class=modal-header> <h4 class=modal-title><span ng-bind=\\\"translate(\\'ADF_COMMON_DELETE\\')\\\">Delete</span> {{widget.title}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle ng-bind=\\\"translate(\\'ADF_WIDGET_DELETE_CONFIRM_MESSAGE\\')\\\">Are you sure you want to delete this widget ?</label> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=deleteDialog() ng-bind=\\\"translate(\\'ADF_COMMON_DELETE\\')\\\">Delete</button> </div> \");\n$templateCache.put(\"../src/templates/widget-edit.html\",\"<form name=widgetEditForm novalidate role=form ng-submit=saveDialog()> <div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>{{widget.title}}</h4> </div> <div class=modal-body> <div class=\\\"alert alert-danger\\\" role=alert ng-show=validationError> <strong>Apply error:</strong> {{validationError}} </div> <div class=form-group> <label for=widgetTitle ng-bind=\\\"translate(\\'ADF_COMMON_TITLE\\')\\\">Title</label> <input type=text class=form-control id=widgetTitle ng-model=definition.title placeholder=\\\"Enter title\\\" required> </div> <div ng-if=widget.edit> <adf-widget-content adf-model=adfModel model=definition content=widget.edit> </adf-widget-content></div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CANCEL\\')\\\">Cancel</button> <input type=submit class=\\\"btn btn-primary\\\" ng-disabled=widgetEditForm.$invalid ng-value=\\\"translate(\\'ADF_COMMON_APPLY\\')\\\"> </div> </form> \");\n$templateCache.put(\"../src/templates/widget-fullscreen.html\",\"<div class=modal-header> <div class=\\\"pull-right widget-icons\\\"> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REFRESH\\') }}\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a> <a href title=close ng-click=closeDialog()> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> </div> <h4 class=modal-title>{{definition.title}}</h4> </div> <div class=modal-body> <adf-widget-content adf-model=adfModel model=definition content=widget> </adf-widget-content></div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div> \");\n$templateCache.put(\"../src/templates/widget-title.html\",\"<h3 class=panel-title> {{definition.title}} <span class=pull-right> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REFRESH\\') }}\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_MOVE\\') }}\\\" class=adf-move ng-if=editMode> <i class=\\\"glyphicon glyphicon-move\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_COLLAPSE\\') }}\\\" ng-show=\\\"options.collapsible && !widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-minus\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_EXPAND\\') }}\\\" ng-show=\\\"options.collapsible && widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-plus\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_EDIT\\') }}\\\" ng-click=edit() ng-if=editMode> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_FULLSCREEN\\') }}\\\" ng-click=openFullScreen() ng-show=options.maximizable> <i class=\\\"glyphicon glyphicon-fullscreen\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REMOVE\\') }}\\\" ng-click=remove() ng-if=editMode> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> </span> </h3> \");\n$templateCache.put(\"../src/templates/widget.html\",\"<div adf-id={{definition.wid}} adf-widget-type={{definition.type}} ng-class=\\\"widgetClasses(widget, definition)\\\" class=widget> <div class=\\\"panel-heading clearfix\\\" ng-if=\\\"!widget.frameless || editMode\\\"> <div ng-include src=definition.titleTemplateUrl></div> </div> <div ng-class=\\\"{\\'panel-body\\':!widget.frameless || editMode}\\\" uib-collapse=widgetState.isCollapsed> <adf-widget-content adf-model=adfModel model=definition content=widget> </adf-widget-content></div> </div> \");\n$templateCache.put(\"../src/templates/widgets/LinkList/edit.html\",\"<form class=form-inline role=form> <div> <label>Links</label> </div> <div class=padding-bottom ng-repeat=\\\"link in config.links\\\"> <div class=form-group> <label class=sr-only for=title-{{$index}}>Título</label> <input type=text id=title-{{$index}} class=form-control placeholder=Título ng-model=link.title required> </div> <div class=form-group> <label class=sr-only for=href-{{$index}}>URL</label> <input type=text id=href-{{$index}} class=form-control placeholder=http://example.com ng-model=link.href required> </div> <div class=form-group> <label class=sr-only for=target-{{$index}}>Target</label> <input type=text id=target-{{$index}} class=form-control placeholder=_self ng-model=link.target required> </div> <button type=button class=\\\"btn btn-warning\\\" ng-click=removeLink($index)> <i class=\\\"fa fa-minus\\\"></i> Remover </button> </div> <button type=button class=\\\"btn btn-primary\\\" ng-click=addLink()> <i class=\\\"fa fa-plus\\\"></i> Adicionar </button> </form>\");\n$templateCache.put(\"../src/templates/widgets/LinkList/view.html\",\"<div class=linklist> <ul> <li ng-repeat=\\\"link in config.links | orderBy:\\'title\\'\\\"> <a target={{Link.target}} ng-href={{link.href}}>{{link.title}}</a> </li> </ul> </div>\");\n$templateCache.put(\"../src/templates/widgets/Clock/edit.html\",\"<form role=form> <div class=form-group> <label for=time>Time pattern</label> <input type=text class=form-control id=time ng-model=config.timePattern> </div> <div class=form-group> <label for=date>Date pattern</label> <input type=text class=form-control id=date ng-model=config.datePattern> </div> <p class=text-info> For the list of possible patterns, please have a look at <a target=_blank href=\\\"http://momentjs.com/docs/#/displaying/\\\">moment.js documentation</a> </p> </form>\");\n$templateCache.put(\"../src/templates/widgets/Clock/view.html\",\"<div class=clock> <div class=clock-time>{{clock.time}}</div> <div class=clock-date>{{clock.date}}</div> </div>\");\n$templateCache.put(\"../src/templates/widgets/PdfView/edit.html\",\"<form class=form-inline role=form> <div> <label>PDFs</label> </div> <div class=padding-bottom ng-repeat=\\\"pdf in config.pdfs\\\"> <div class=form-group> <label class=sr-only for=title-{{$index}}>Título</label> <input type=text id=title-{{$index}} class=form-control placeholder=Título ng-model=pdf.title required> </div> <div class=form-group> <label class=sr-only for=href-{{$index}}>URL</label> <input type=url id=href-{{$index}} class=form-control placeholder=http://example.com ng-model=pdf.href required> </div> <button type=button class=\\\"btn btn-warning\\\" ng-click=removeLink($index)> <i class=\\\"fa fa-minus\\\"></i> Remover </button> </div> <button type=button class=\\\"btn btn-primary\\\" ng-click=addLink()> <i class=\\\"fa fa-plus\\\"></i> Adicionar </button> </form>\");\n$templateCache.put(\"../src/templates/widgets/PdfView/view.html\",\"<div class=pdf> <uib-tabset> <uib-tab heading={{pdf.title}} ng-repeat=\\\"pdf in config.pdfs\\\"> <div class=\\\"embed-responsive embed-responsive-16by9\\\"> <div pdf-viewer class=embed-responsive-item src=pdf.href></div> </div> </uib-tab> </uib-tabset> </div>\");\n$templateCache.put(\"../src/templates/widgets/Weather/edit.html\",\"<form role=form> <div class=form-group> <label for=location>Cidade</label> <input type=location class=form-control id=location ng-model=config.location placeholder=\\\"Enter location\\\"> </div> </form>\");\n$templateCache.put(\"../src/templates/widgets/Weather/view.html\",\"<div class=text-center> <div class=\\\"alert alert-info\\\" ng-if=!data> Insira o nome da Cidade na configuração. </div> <div class=weather ng-if=data> <div class=col-md-4> <i class=\\\"owf owf-4x owf-{{data.weather[0].id}}\\\"></i> <p class=description>{{data.weather[0].description}}</p>  </div> <div class=col-md-8> <h4>{{data.name}} ({{data.sys.country}})</h4> <dl> <dt>Temperatura:</dt> <dd>{{data.main.temp_min | number:0}}ºC - {{data.main.temp_max | number:0}}ºC</dd> </dl> </div> </div> </div>\");}]);\n\r\n\r\nangular.module('adf.widget.weather', ['adf.provider'])\r\n    .value('weatherApiKey', 'fe8e62312d4265df60bd83feb042853a')\r\n    .value('weatherServiceUrl', 'http://api.openweathermap.org/data/2.5/weather?units=metric&lang=pt&q=')\r\n    .config(function($sceDelegateProvider) {\r\n        $sceDelegateProvider.resourceUrlWhitelist([\r\n            // Allow same origin resource loads.\r\n            'self',\r\n            // Allow loading from our assets domain.  Notice the difference between * and **.\r\n            'http://*.openweathermap.org/**'\r\n        ])\r\n    })\r\n    .config(function(dashboardProvider){\r\n        dashboardProvider\r\n            .widget('weather', {\r\n                title: 'Pevisão do Tempo',\r\n                description: 'Exibe a previsão do tempo para a cidade selecionada',\r\n                templateUrl: '../src/templates/widgets/Weather/view.html',\r\n                controller: 'WeatherCtrl',\r\n                reload: true,\r\n                resolve: {\r\n                    data: function(weatcherService, config){\r\n                        if (config.location){\r\n                            return weatcherService.get(config.location);\r\n                        }\r\n                    }\r\n                },\r\n                edit: {\r\n                    templateUrl: '../src/templates/widgets/Weather/edit.html'\r\n                }\r\n            });\r\n    })\r\n    .service('weatcherService', function($q, $http, weatherServiceUrl, weatherApiKey, $sce){\r\n        return {\r\n            get: function(location){\r\n                var deferred = $q.defer();\r\n                var url = function(){\r\n                    return (weatherServiceUrl + location + '&appid=' + weatherApiKey);\r\n                };\r\n                $http.get(url()).then(\r\n                   function(res){\r\n                        if (res.data && res.data.cod === 200){\r\n                            deferred.resolve(res.data);\r\n                        } else {\r\n                            deferred.reject();\r\n                        }\r\n                    },\r\n                    function(){\r\n                        deferred.reject();\r\n                    });\r\n                return deferred.promise;\r\n            }\r\n        };\r\n    })\r\n    .controller('WeatherCtrl', function($scope, data){\r\n        $scope.data = data;\r\n    });\n\r\n\r\nangular.module('adf.widget.pdfviewer', ['adf.provider'])\r\n    .directive('pdfViewer', function($sce){\r\n        return {\r\n            restrict: 'AE',\r\n            scope: {\r\n                src: '='\r\n            },\r\n            template: '<div ng-show=\"show\" id=\"gdvId\" class=\"gdocsviewer\"><iframe ng-src=\"{{getUrl()}}\" width=\"{{settings.width}}\" height=\"{{settings.height}}\"></iframe></div>',\r\n            link: function(scope, element, attrs){\r\n                scope.settings = {\r\n                    width  : '600',\r\n                    height : '700'\r\n                };\r\n\r\n                var file = scope.src;\r\n                var ext = file.substring(file.lastIndexOf('.') + 1);\r\n                scope.gdvId = scope.$id;\r\n                scope.show = false;\r\n\r\n                scope.getUrl = function(){\r\n                    if (/^(tiff|pdf|ppt|pps|doc|docx|xls|xlsx|jpg|png)$/.test(ext)) {\r\n                        scope.show = true;\r\n                    }\r\n                    return $sce.trustAsResourceUrl('http://impress.app/Plugin/KbCore/views/pdf/index.php?file=' + scope.src);\r\n                }\r\n\r\n\r\n            }\r\n        }\r\n    })\r\n    .config(function(dashboardProvider){\r\n        dashboardProvider\r\n            .widget('pdfviewer', {\r\n                title: 'PDF',\r\n                description: 'Exibir PDFs',\r\n                category: 'Relatórios',\r\n                reload: true,\r\n                templateUrl: '../src/templates/widgets/PdfView/view.html',\r\n                edit: {\r\n                    templateUrl: '../src/templates/widgets/PdfView/edit.html',\r\n                    controller: 'PdfViewEditCtrl'\r\n                }\r\n            });\r\n    }).controller('PdfViewEditCtrl', function($scope){\r\n\r\n    function getPdfs(){\r\n        if (!$scope.config.pdfs){\r\n            $scope.config.pdfs = [];\r\n        }\r\n        return $scope.config.pdfs;\r\n    }\r\n\r\n    $scope.addLink = function(){\r\n        getPdfs().push({});\r\n    };\r\n\r\n    $scope.removeLink = function(index){\r\n        getPdfs().splice(index, 1);\r\n    };\r\n});/*\r\n * jQuery.gdocViewer - Embed linked documents using Google Docs Viewer\r\n * Licensed under MIT license.\r\n * Date: 2011/01/16\r\n *\r\n * @author Jawish Hameed\r\n * @version 1.0\r\n */\r\n(function($){\r\n    $.fn.gdocsViewer = function(options) {\r\n\r\n        var settings = {\r\n            width  : '600',\r\n            height : '700'\r\n        };\r\n\r\n        if (options) {\r\n            $.extend(settings, options);\r\n        }\r\n\r\n        return this.each(function() {\r\n            var file = $(this).attr('href');\r\n            var ext = file.substring(file.lastIndexOf('.') + 1);\r\n\r\n            if (/^(tiff|pdf|ppt|pps|doc|docx|xls|xlsx)$/.test(ext)) {\r\n                $(this).after(function () {\r\n                    var id = $(this).attr('id');\r\n                    var gdvId = (typeof id !== 'undefined' && id !== false) ? id + '-gdocsviewer' : '';\r\n                    return '<div id=\"' + gdvId + '\" class=\"gdocsviewer\"><iframe src=\"http://docs.google.com/viewer?embedded=true&url=' + encodeURIComponent(file) + '\" width=\"' + settings.width + '\" height=\"' + settings.height + '\" style=\"border: none;\"></iframe></div>';\r\n                })\r\n            }\r\n        });\r\n    };\r\n})( jQuery );\nangular.module('adf.widget.clock', ['adf.provider'])\r\n    .config(function(dashboardProvider){\r\n        dashboardProvider\r\n            .widget('clock', {\r\n                title: 'Relógio',\r\n                description: 'Exibe Data/Hora',\r\n                category: 'Diversos',\r\n                templateUrl: '../src/templates/widgets/Clock/view.html',\r\n                controller: 'ClockController',\r\n                controllerAs: 'clock',\r\n                config: {\r\n                    timePattern: 'HH:mm:ss',\r\n                    datePattern: 'DD/MM/YYYY'\r\n                },\r\n                edit: {\r\n                    templateUrl: '../src/templates/widgets/Clock/edit.html'\r\n                }\r\n            });\r\n    })\r\n    .controller('ClockController', function($scope, $interval, config){\r\n        var clock = this;\r\n\r\n        function setDateAndTime(){\r\n            var d = new moment();\r\n            clock.time = d.format(config.timePattern);\r\n            clock.date = d.format(config.datePattern);\r\n        }\r\n\r\n        setDateAndTime();\r\n\r\n        // refresh every second\r\n        var promise = $interval(setDateAndTime, 1000);\r\n\r\n        // cancel interval on scope destroy\r\n        $scope.$on('$destroy', function(){\r\n            $interval.cancel(promise);\r\n        });\r\n    });\n\r\n\r\nangular.module('adf.widget.linklist', ['adf.provider'])\r\n    .config(function(dashboardProvider){\r\n        dashboardProvider\r\n            .widget('linklist', {\r\n                title: 'Links',\r\n                description: 'Exibir Lista de Links',\r\n                category: 'Diversos',\r\n                templateUrl: '../src/templates/widgets/Linklist/view.html',\r\n                edit: {\r\n                    templateUrl: '../src/templates/widgets/Linklist/edit.html',\r\n                    controller: 'LinklistEditCtrl'\r\n                }\r\n            });\r\n    }).controller('LinklistEditCtrl', function($scope){\r\n\r\n    function getLinks(){\r\n        if (!$scope.config.links){\r\n            $scope.config.links = [];\r\n        }\r\n        return $scope.config.links;\r\n    }\r\n\r\n    $scope.addLink = function(){\r\n        getLinks().push({});\r\n    };\r\n\r\n    $scope.removeLink = function(index){\r\n        getLinks().splice(index, 1);\r\n    };\r\n});\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/**\n * The widget service provide helper functions to render widgets and their content.\n */\nangular.module('adf')\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\n    \n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    var exposed = {};\n\n    exposed.getTemplate = function(widget){\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .then(function(response) {\n                 return response.data;\n               })\n               .then(function(data) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, data);\n                 deferred.resolve(data);\n               })\n               .catch(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    };\n\n    return exposed;\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nangular.module('adf')\n  .factory('adfUtilsService', function () {\n    \n\n    var service = {\n      stringToBoolean: stringToBoolean,\n      split: split\n    };\n    return service;\n\n    function stringToBoolean(string){\n      switch(angular.isString(string) ? string.toLowerCase() : null){\n        case 'true': case 'yes': case '1': return true;\n        case 'false': case 'no': case '0': case null: return false;\n        default: return Boolean(string);\n      }\n    }\n\n    /**\n     * Splits an object into an array multiple objects inside.\n     *\n     * @param object source object\n     * @param size size of array\n     *\n     * @return array of splitted objects\n     */\n    function split(object, size) {\n      var arr = [];\n      var i = 0;\n      angular.forEach(object, function(value, key){\n        var index = i++ % size;\n        if (!arr[index]){\n          arr[index] = {};\n        }\n        arr[index][key] = value;\n      });\n      return arr;\n    }\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nangular.module('adf')\n  .factory('adfStructurePreviewService', function () {\n    \n\n    var service = {\n      adjustRowHeight: adjustRowHeight\n    };\n    return service;\n\n    function adjustRowHeight(container){\n      if (container.rows && container.rows.length > 0){\n        var height = 100 / container.rows.length;\n        angular.forEach(container.rows, function(row){\n          row.style = {\n            height: height + '%'\n          }\n\n          if (row.columns){\n            angular.forEach(row.columns, function(column){\n              adjustRowHeight(column);\n            });\n          }\n        });\n      }\n    }\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nangular.module('adf')\n  .factory('adfDashboardService', function ($log, dashboard, $rootScope) {\n    \n\n    var service = {\n      changeStructure: changeStructure,\n      createConfiguration: createConfiguration,\n      addNewWidgetToModel: addNewWidgetToModel,\n      isEditModeImmediate: isEditModeImmediate,\n      createCategories: createCategories,\n\n      // expose internal functions for testing purposes\n      // TODO find a nicer way\n      _tests: {\n        _readColumns: _readColumns\n      }\n    };\n    return service;\n\n    function _copyWidgets(source, target) {\n      if ( source.widgets && source.widgets.length > 0 ){\n        var w = source.widgets.shift();\n        while (w){\n          target.widgets.push(w);\n          w = source.widgets.shift();\n        }\n      }\n    }\n\n    /**\n    * Copy widget from old columns to the new model\n    * @param object root the model\n    * @param array of columns\n    * @param counter\n    */\n    function _fillStructure(root, columns, counter) {\n      counter = counter || 0;\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (column) {\n            // if the widgets prop doesn't exist, create a new array for it.\n            // this allows ui.sortable to do it's thing without error\n            if (!column.widgets) {\n              column.widgets = [];\n            }\n\n            // if a column exist at the counter index, copy over the column\n            if (angular.isDefined(columns[counter])) {\n              // do not add widgets to a column, which uses nested rows\n              if (angular.isUndefined(column.rows)){\n                _copyWidgets(columns[counter], column);\n                counter++;\n              }\n            }\n\n            // run fillStructure again for any sub rows/columns\n            counter = _fillStructure(column, columns, counter);\n          });\n        });\n      }\n      return counter;\n    }\n\n    /**\n    * Read Columns: recursively searches an object for the 'columns' property\n    * @param object model\n    * @param array  an array of existing columns; used when recursion happens\n    */\n    function _readColumns(root, columns) {\n      columns = columns || [];\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (col) {\n            if (!col.hasOwnProperty('rows')) {\n              columns.push(col);\n            }\n            // keep reading columns until we can't any more\n            _readColumns(col, columns);\n          });\n        });\n      }\n\n      return columns;\n    }\n\n    function changeStructure(model, structure){\n      var columns = _readColumns(model);\n      var counter = 0;\n\n      model.rows = angular.copy(structure.rows);\n\n      while ( counter < columns.length ){\n        counter = _fillStructure(model, columns, counter);\n      }\n    }\n\n    function createConfiguration(type){\n      var cfg = {};\n      var config = dashboard.widgets[type].config;\n      if (config){\n        cfg = angular.copy(config);\n      }\n      return cfg;\n    }\n\n    /**\n     * Find first widget column in model.\n     *\n     * @param dashboard model\n     */\n    function _findFirstWidgetColumn(model){\n      var column = null;\n      if (!angular.isArray(model.rows)){\n        $log.error('model does not have any rows');\n        return null;\n      }\n      for (var i=0; i<model.rows.length; i++){\n        var row = model.rows[i];\n        if (angular.isArray(row.columns)){\n          for (var j=0; j<row.columns.length; j++){\n            var col = row.columns[j];\n            if (!col.rows){\n              column = col;\n              break;\n            }\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * Adds the widget to first column of the model.\n     *\n     * @param dashboard model\n     * @param widget to add to model\n     * @param name name of the dashboard\n     */\n    function addNewWidgetToModel(model, widget, name){\n      if (model){\n        var column = _findFirstWidgetColumn(model);\n        if (column){\n          if (!column.widgets){\n            column.widgets = [];\n          }\n          column.widgets.unshift(widget);\n\n          $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\n        } else {\n          $log.error('could not find first widget column');\n        }\n      } else {\n        $log.error('model is undefined');\n      }\n    }\n\n    /**\n     * Checks if the edit mode of the widget should be opened immediately.\n     *\n     * @param widget type\n     */\n    function isEditModeImmediate(type){\n      var widget = dashboard.widgets[type];\n      return widget && widget.edit && widget.edit.immediate;\n    }\n\n    /**\n     * Creates object with the category name as key and an array of widgets as value.\n     *\n     * @param widgets array of widgets\n     *\n     * @return array of categories\n     */\n    function createCategories(widgets){\n      var categories = {};\n      angular.forEach(widgets, function(widget, key){\n        var category = widget.category;\n        // if the widget has no category use a default one\n        if (!category){\n          category = 'Miscellaneous';\n        }\n        // push widget to category array\n        if (angular.isUndefined(categories[category])){\n          categories[category] = {widgets: {}};\n        }\n        categories[category].widgets[key] = widget;\n      });\n      return categories;\n    }\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n  .directive('adfWidget', function($injector, $q, $log, $uibModal, $rootScope, dashboard, adfTemplatePath) {\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\n      scope: {\n        adfModel: '=',\n        definition: '=',\n        col: '=column',\n        editMode: '=',\n        options: '=',\n        widgetState: '='\n      },\n      controller: controller,\n      compile: function() {\n\n        /**\n         * use pre link, because link of widget-content\n         * is executed before post link widget\n         */\n        return {\n          pre: preLink,\n          post: postLink\n        };\n      }\n    };\n\n    function preLink($scope) {\n      var definition = $scope.definition;\n\n      //passs translate function from dashboard so we can translate labels inside html templates\n      $scope.translate = dashboard.translate;\n\n      if (definition) {\n        var w = dashboard.widgets[definition.type];\n        if (w) {\n          // pass title\n          if (!definition.title) {\n            definition.title = w.title;\n          }\n\n          if (!definition.titleTemplateUrl) {\n            definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\n            if (w.titleTemplateUrl) {\n              definition.titleTemplateUrl = w.titleTemplateUrl;\n            }\n          }\n\n          if (!definition.editTemplateUrl) {\n            definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\n            if (w.editTemplateUrl) {\n              definition.editTemplateUrl = w.editTemplateUrl;\n            }\n          }\n\n          if (!definition.titleTemplateUrl) {\n            definition.frameless = w.frameless;\n          }\n\n          if (!definition.styleClass) {\n            definition.styleClass = w.styleClass;\n          }\n\n          // set id for sortable\n          if (!definition.wid) {\n            definition.wid = dashboard.id();\n          }\n\n          // pass copy of widget to scope\n          $scope.widget = angular.copy(w);\n\n          // create config object\n          var config = definition.config;\n          if (config) {\n            if (angular.isString(config)) {\n              config = angular.fromJson(config);\n            }\n          } else {\n            config = {};\n          }\n\n          // pass config to scope\n          $scope.config = config;\n\n          // collapse exposed $scope.widgetState property\n          if (!$scope.widgetState) {\n            $scope.widgetState = {};\n            $scope.widgetState.isCollapsed= (w.collapsed === true) ? w.collapsed : false;\n          }\n\n        } else {\n          $log.warn('could not find widget ' + definition.type);\n        }\n      } else {\n        $log.debug('definition not specified, widget was probably removed');\n      }\n    }\n\n    function postLink($scope, $element) {\n      var definition = $scope.definition;\n      if (definition) {\n        // bind close function\n\n        var deleteWidget = function() {\n          var column = $scope.col;\n          if (column) {\n            var index = column.widgets.indexOf(definition);\n            if (index >= 0) {\n              column.widgets.splice(index, 1);\n            }\n          }\n          $element.remove();\n          $rootScope.$broadcast('adfWidgetRemovedFromColumn', definition);\n        };\n\n        $scope.remove = function() {\n          if ($scope.options.enableConfirmDelete) {\n            var deleteScope = $scope.$new();\n            deleteScope.translate = dashboard.translate;\n\n            var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n            if (definition.deleteTemplateUrl) {\n              deleteTemplateUrl = definition.deleteTemplateUrl;\n            }\n            var opts = {\n              scope: deleteScope,\n              templateUrl: deleteTemplateUrl,\n              windowClass: 'adf-remove-widget-modal',\n              backdrop: 'static'\n            };\n            var instance = $uibModal.open(opts);\n\n            deleteScope.closeDialog = function() {\n              instance.close();\n              deleteScope.$destroy();\n            };\n            deleteScope.deleteDialog = function() {\n              deleteWidget();\n              deleteScope.closeDialog();\n            };\n          } else {\n            deleteWidget();\n          }\n        };\n\n        // bind reload function\n        $scope.reload = function() {\n          $scope.$broadcast('widgetReload');\n        };\n\n        // bind edit function\n        $scope.edit = function() {\n          var editScope = $scope.$new();\n          editScope.translate = dashboard.translate;\n          editScope.definition = angular.copy(definition);\n\n          var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n          if (definition.editTemplateUrl) {\n            adfEditTemplatePath = definition.editTemplateUrl;\n          }\n\n          var opts = {\n            scope: editScope,\n            templateUrl: adfEditTemplatePath,\n            windowClass: 'adf-edit-widget-modal',\n            backdrop: 'static'\n          };\n\n          var instance = $uibModal.open(opts);\n\n          editScope.closeDialog = function() {\n            instance.close();\n            editScope.$destroy();\n          };\n\n          // TODO create util method\n          function createApplyPromise(result){\n            var promise;\n            if (typeof result === 'boolean'){\n              var deferred = $q.defer();\n              if (result){\n                deferred.resolve();\n              } else {\n                deferred.reject();\n              }\n              promise = deferred.promise;\n            } else {\n              promise = $q.when(result);\n            }\n            return promise;\n          }\n\n          editScope.saveDialog = function() {\n            // clear validation error\n            editScope.validationError = null;\n\n            // build injection locals\n            var widget = $scope.widget;\n\n            // create a default apply method for widgets\n            // without edit mode\n            // see issue https://goo.gl/KHPQLZ\n            var applyFn;\n            if (widget.edit){\n              applyFn = widget.edit.apply;\n            } else {\n              applyFn = function(){\n                return true;\n              };\n            }\n\n            // injection locals\n            var locals = {\n              widget: widget,\n              definition: editScope.definition,\n              config: editScope.definition.config\n            };\n\n            // invoke apply function and apply if success\n            var result = $injector.invoke(applyFn, applyFn, locals);\n            createApplyPromise(result).then(function(){\n              definition.title = editScope.definition.title;\n              angular.extend(definition.config, editScope.definition.config);\n              if (widget.edit && widget.edit.reload) {\n                // reload content after edit dialog is closed\n                $scope.$broadcast('widgetConfigChanged');\n              }\n              editScope.closeDialog();\n            }, function(err){\n              if (err){\n                editScope.validationError = err;\n              } else {\n                editScope.validationError = 'Validation durring apply failed';\n              }\n            });\n          };\n\n        };\n      } else {\n        $log.debug('widget not found');\n      }\n    }\n\n    function controller($scope){\n\n      $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n        $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n      });\n\n      $scope.$on('adfWidgetEnterEditMode', function(event, widget){\n        if (dashboard.idEquals($scope.definition.wid, widget.wid)){\n          $scope.edit();\n        }\n      });\n\n      $scope.widgetClasses = function(w, definition){\n        var classes = definition.styleClass || '';\n        // w is undefined, if the type of the widget is unknown\n        // see issue #216\n        if (!w || !w.frameless || $scope.editMode){\n          classes += ' panel panel-default';\n        }\n        return classes;\n      };\n\n      $scope.openFullScreen = function() {\n        var definition = $scope.definition;\n        var fullScreenScope = $scope.$new();\n        var opts = {\n          scope: fullScreenScope,\n          templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n          size: definition.modalSize || 'lg', // 'sm', 'lg'\n          backdrop: 'static',\n          windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n        };\n\n        var instance = $uibModal.open(opts);\n        fullScreenScope.closeDialog = function() {\n          instance.close();\n          fullScreenScope.$destroy();\n        };\n      };\n    }\n\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n  .directive('adfWidgetContent', function($log, $q, widgetService, $compile, $controller, $injector, dashboard) {\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      scope: {\n        adfModel: '=',\n        model: '=',\n        content: '='\n      },\n      link: link\n    };\n\n    function renderError($element, msg){\n        $log.warn(msg);\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n    }\n\n    function compileWidget($scope, $element, currentScope) {\n      var model = $scope.model;\n      var content = $scope.content;\n\n      var newScope = currentScope;\n      if (!model){\n        renderError($element, 'model is undefined')\n      } else if (!content){\n        var msg = 'widget content is undefined, please have a look at your browser log';\n        renderError($element, msg);\n      } else {\n        newScope = renderWidget($scope, $element, currentScope, model, content);\n      }\n      return newScope;\n    }\n\n    function renderWidget($scope, $element, currentScope, model, content) {\n      // display loading template\n      $element.html(dashboard.loadingTemplate);\n\n      // create new scope\n      var templateScope = $scope.$new();\n\n      // pass config object to scope\n      if (!model.config) {\n        model.config = {};\n      }\n\n      templateScope.config = model.config;\n\n      // local injections\n      var base = {\n        $scope: templateScope,\n        widget: model,\n        config: model.config\n      };\n\n      // get resolve promises from content object\n      var resolvers = {};\n      resolvers.$tpl = widgetService.getTemplate(content);\n      if (content.resolve) {\n        angular.forEach(content.resolve, function(promise, key) {\n          if (angular.isString(promise)) {\n            resolvers[key] = $injector.get(promise);\n          } else {\n            resolvers[key] = $injector.invoke(promise, promise, base);\n          }\n        });\n      }\n\n      // resolve all resolvers\n      $q.all(resolvers).then(function(locals) {\n        angular.extend(locals, base);\n\n        // pass resolve map to template scope as defined in resolveAs\n        if (content.resolveAs){\n          templateScope[content.resolveAs] = locals;\n        }\n\n        // compile & render template\n        var template = locals.$tpl;\n        $element.html(template);\n        if (content.controller) {\n          var templateCtrl = $controller(content.controller, locals);\n          if (content.controllerAs) {\n            templateScope[content.controllerAs] = templateCtrl;\n          }\n          $element.children().data('$ngControllerController', templateCtrl);\n        }\n        $compile($element.contents())(templateScope);\n      }, function(reason) {\n        // handle promise rejection\n        var msg = 'Could not resolve all promises';\n        if (reason) {\n          msg += ': ' + reason;\n        }\n        renderError($element, msg);\n      });\n\n      // destroy old scope\n      if (currentScope) {\n        currentScope.$destroy();\n      }\n\n      return templateScope;\n    }\n\n    function link($scope, $element) {\n      var currentScope = compileWidget($scope, $element, null);\n      $scope.$on('widgetConfigChanged', function() {\n        currentScope = compileWidget($scope, $element, currentScope);\n      });\n      $scope.$on('widgetReload', function() {\n        currentScope = compileWidget($scope, $element, currentScope);\n      });\n    }\n\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfStructurePreview', function(adfTemplatePath, adfStructurePreviewService) {\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        name: '=',\n        structure: '=',\n        selected: '='\n      },\n      templateUrl: adfTemplatePath + 'structure-preview.html',\n      link: link\n    };\n\n    function link($scope){\n      var structure = angular.copy($scope.structure);\n      adfStructurePreviewService.adjustRowHeight(structure);\n      $scope.preview = structure;\n    }\n\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {string=} structure the default structure of the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\n *                   events during edit mode not reset it if edit mode is exited.\n * @param {boolean=} categories enable categories for the add widget dialog.\n */\n\nangular.module('adf')\n  .directive('adfDashboard', function ($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, adfDashboardService, adfUtilsService) {\n    \n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude : false,\n      scope: {\n        structure: '@',\n        name: '@',\n        collapsible: '@',\n        editable: '@',\n        editMode: '@',\n        continuousEditMode: '=',\n        maximizable: '@',\n        adfModel: '=',\n        adfWidgetFilter: '=',\n        categories: '@'\n      },\n      controller: controller,\n      link: link,\n      templateUrl: adfTemplatePath + 'dashboard.html'\n    };\n\n    /**\n     * Opens the edit mode of the specified widget.\n     *\n     * @param dashboard scope\n     * @param widget\n     */\n    function _openEditMode($scope, widget){\n      // wait some time before fire enter edit mode event\n      $timeout(function(){\n        $scope.$broadcast('adfWidgetEnterEditMode', widget);\n      }, 200);\n    }\n\n    /**\n     * Directive controller function.\n     *\n     * @param dashboard scope\n     */\n    function controller($scope){\n      var model = {};\n      var structure = {};\n      var widgetFilter = null;\n      var structureName = {};\n      var name = $scope.name;\n\n      // Watching for changes on adfModel\n      $scope.$watch('adfModel', function(oldVal, newVal) {\n       // has model changed or is the model attribute not set\n       if (newVal !== null || (oldVal === null && newVal === null)) {\n         model = $scope.adfModel;\n         widgetFilter = $scope.adfWidgetFilter;\n         if ( ! model || ! model.rows ){\n           structureName = $scope.structure;\n           structure = dashboard.structures[structureName];\n           if (structure){\n             if (model){\n               model.rows = angular.copy(structure).rows;\n             } else {\n               model = angular.copy(structure);\n             }\n             model.structure = structureName;\n           } else {\n             $log.error( 'could not find structure ' + structureName);\n           }\n         }\n\n         if (model) {\n           if (!model.title){\n             model.title = 'Dashboard';\n           }\n           if (!model.titleTemplateUrl) {\n             model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\n           }\n           $scope.model = model;\n         } else {\n           $log.error('could not find or create model');\n         }\n       }\n      }, true);\n\n      // edit mode\n      $scope.editMode = false;\n      $scope.editClass = '';\n\n      //passs translate function from dashboard so we can translate labels inside html templates\n      $scope.translate = dashboard.translate;\n\n      function getNewModalScope() {\n       var scope = $scope.$new();\n       //pass translate function to the new scope so we can translate the labels inside the modal dialog\n       scope.translate = dashboard.translate;\n       return scope;\n      }\n\n      $scope.toggleEditMode = function(){\n       $scope.editMode = ! $scope.editMode;\n       if ($scope.editMode){\n         if (!$scope.continuousEditMode) {\n           $scope.modelCopy = angular.copy($scope.adfModel, {});\n           $rootScope.$broadcast('adfIsEditMode');\n         }\n       }\n\n       if (!$scope.editMode){\n         $rootScope.$broadcast('adfDashboardChanged', name, model);\n       }\n      };\n\n      $scope.$on('adfToggleEditMode', function() {\n         $scope.toggleEditMode();\n      });\n\n      $scope.collapseAll = function(collapseExpandStatus){\n       $rootScope.$broadcast('adfDashboardCollapseExpand',{collapseExpandStatus : collapseExpandStatus});\n      };\n\n      $scope.cancelEditMode = function(){\n       $scope.editMode = false;\n       if (!$scope.continuousEditMode) {\n         $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n       }\n       $rootScope.$broadcast('adfDashboardEditsCancelled');\n      };\n\n      // edit dashboard settings\n      $scope.editDashboardDialog = function(){\n       var editDashboardScope = getNewModalScope();\n       // create a copy of the title, to avoid changing the title to\n       // \"dashboard\" if the field is empty\n       editDashboardScope.copy = {\n         title: model.title\n       };\n\n       // pass dashboard structure to scope\n       editDashboardScope.structures = dashboard.structures;\n\n       // pass split function to scope, to be able to display structures in multiple columns\n       editDashboardScope.split = adfUtilsService.split;\n\n       var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\n       if(model.editTemplateUrl) {\n         adfEditTemplatePath = model.editTemplateUrl;\n       }\n       var instance = $uibModal.open({\n         scope: editDashboardScope,\n         templateUrl: adfEditTemplatePath,\n         backdrop: 'static',\n         windowClass: 'adf-edit-dashboard-modal',\n         size: 'lg'\n       });\n       editDashboardScope.changeStructure = function(name, structure){\n         $log.info('change structure to ' + name);\n         adfDashboardService.changeStructure(model, structure);\n         if (model.structure !== name){\n           model.structure = name;\n         }\n       };\n       editDashboardScope.closeDialog = function(){\n         // copy the new title back to the model\n         model.title = editDashboardScope.copy.title;\n         // close modal and destroy the scope\n         instance.close();\n         editDashboardScope.$destroy();\n       };\n      };\n\n      // add widget dialog\n      $scope.addWidgetDialog = function(){\n       var addScope = getNewModalScope();\n       var model = $scope.model;\n       var widgets;\n       if (angular.isFunction(widgetFilter)){\n         widgets = {};\n         angular.forEach(dashboard.widgets, function(widget, type){\n           if (widgetFilter(widget, type, model)){\n             widgets[type] = widget;\n           }\n         });\n       } else {\n         widgets = dashboard.widgets;\n       }\n       addScope.widgets = widgets;\n\n       //pass translate function to the new scope so we can translate the labels inside the modal dialog\n       addScope.translate = $scope.translate;\n\n       // pass createCategories function to scope, if categories option is enabled\n       if ($scope.options.categories){\n         $scope.createCategories = adfDashboardService.createCategories;\n       }\n\n       var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n       if(model.addTemplateUrl) {\n         adfAddTemplatePath = model.addTemplateUrl;\n       }\n\n       var opts = {\n         scope: addScope,\n         templateUrl: adfAddTemplatePath,\n         windowClass: 'adf-add-widget-modal',\n         backdrop: 'static'\n       };\n\n       var instance = $uibModal.open(opts);\n       addScope.addWidget = function(widget){\n         var w = {\n           type: widget,\n           config: adfDashboardService.createConfiguration(widget)\n         };\n         adfDashboardService.addNewWidgetToModel(model, w, name);\n         // close and destroy\n         instance.close();\n         addScope.$destroy();\n\n         // check for open edit mode immediately\n         if (adfDashboardService.isEditModeImmediate(widget)){\n           _openEditMode($scope, w);\n         }\n       };\n       addScope.closeDialog = function(){\n         // close and destroy\n         instance.close();\n         addScope.$destroy();\n       };\n      };\n\n      $scope.addNewWidgetToModel = adfDashboardService.addNewWidgetToModel;\n    }\n\n    /**\n     * Directive link function.\n     *\n     * @param dashboard scope\n     * @param directive DOM element\n     * @param directive attributes\n     */\n    function link($scope, $element, $attr) {\n      // pass options to scope\n      var options = {\n        name: $attr.name,\n        editable: true,\n        enableConfirmDelete: adfUtilsService.stringToBoolean($attr.enableConfirmDelete),\n        maximizable: adfUtilsService.stringToBoolean($attr.maximizable),\n        collapsible: adfUtilsService.stringToBoolean($attr.collapsible),\n        categories: adfUtilsService.stringToBoolean($attr.categories)\n      };\n      if (angular.isDefined($attr.editable)){\n        options.editable = adfUtilsService.stringToBoolean($attr.editable);\n      }\n      $scope.options = options;\n    }\n  });\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\n    \n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        row: '=',\n        adfModel: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\n      link: link\n    };\n\n    function link($scope, $element) {\n      if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\n        $compile(columnTemplate)($scope, function(cloned) {\n          $element.append(cloned);\n        });\n      }\n    }\n  });\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardColumn', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\n    \n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        adfModel: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\n      link: link\n    };\n\n    /**\n     * moves a widget in between a column\n     */\n    function moveWidgetInColumn($scope, column, evt){\n      var widgets = column.widgets;\n      // move widget and apply to scope\n      $scope.$apply(function(){\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\n      });\n    }\n\n    /**\n     * finds a widget by its id in the column\n     */\n    function findWidget(column, index){\n      var widget = null;\n      for (var i=0; i<column.widgets.length; i++){\n        var w = column.widgets[i];\n        if (dashboard.idEquals(w.wid,index)){\n          widget = w;\n          break;\n        }\n      }\n      return widget;\n    }\n\n    /**\n     * finds a column by its id in the model\n     */\n    function findColumn(model, index){\n      var column = null;\n      for (var i=0; i<model.rows.length; i++){\n        var r = model.rows[i];\n        for (var j=0; j<r.columns.length; j++){\n          var c = r.columns[j];\n          if (dashboard.idEquals(c.cid, index)){\n            column = c;\n            break;\n          } else if (c.rows){\n            column = findColumn(c, index);\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * get the adf id from an html element\n     */\n    function getId(el){\n      var id = el.getAttribute('adf-id');\n      return id ? id : '-1';\n    }\n\n    /**\n     * adds a widget to a column\n     */\n    function addWidgetToColumn($scope, model, targetColumn, evt){\n      // find source column\n      var cid = getId(evt.from);\n      var sourceColumn = findColumn(model, cid);\n\n      if (sourceColumn){\n        // find moved widget\n        var wid = getId(evt.item);\n        var widget = findWidget(sourceColumn, wid);\n\n        if (widget){\n          // add new item and apply to scope\n          $scope.$apply(function(){\n            if (!targetColumn.widgets) {\n              targetColumn.widgets = [];\n            }\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\n\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\n          });\n        } else {\n          $log.warn('could not find widget with id ' + wid);\n        }\n      } else {\n        $log.warn('could not find column with id ' + cid);\n      }\n    }\n\n    /**\n     * removes a widget from a column\n     */\n    function removeWidgetFromColumn($scope, column, evt){\n      // remove old item and apply to scope\n      $scope.$apply(function(){\n        column.widgets.splice(evt.oldIndex, 1);\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n      });\n    }\n\n    /**\n     * enable sortable\n     */\n    function applySortable($scope, $element, model, column){\n      // enable drag and drop\n      var el = $element[0];\n      var sortable = Sortable.create(el, {\n        group: 'widgets',\n        handle: '.adf-move',\n        ghostClass: 'placeholder',\n        animation: 150,\n        onAdd: function(evt){\n          addWidgetToColumn($scope, model, column, evt);\n        },\n        onRemove: function(evt){\n          removeWidgetFromColumn($scope, column, evt);\n        },\n        onUpdate: function(evt){\n          moveWidgetInColumn($scope, column, evt);\n        }\n      });\n\n      // destroy sortable on column destroy event\n      $element.on('$destroy', function () {\n        // check sortable element, before calling destroy\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\n        if (sortable.el){\n          sortable.destroy();\n        }\n      });\n    }\n\n    function link($scope, $element) {\n      // set id\n      var col = $scope.column;\n      if (!col.cid){\n        col.cid = dashboard.id();\n      }\n\n      if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\n        // be sure to tell Angular about the injected directive and push the new row directive to the column\n        $compile(rowTemplate)($scope, function(cloned) {\n          $element.append(cloned);\n        });\n      } else {\n        // enable drag and drop for widget only columns\n        applySortable($scope, $element, $scope.adfModel, col);\n      }\n    }\n\n  });\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .filter('adfOrderByObjectKey', function($filter) {\n    \n\n    return function(item, key){\n      var array = [];\n      angular.forEach(item, function(value, objectKey){\n        value[key] = objectKey;\n        array.push(value);\n      });\n      return $filter('orderBy')(array, key);\n    };\n  });\n\nangular.module('adf.structures.base', ['adf'])\r\n    .config(function(dashboardProvider){\r\n\r\n        dashboardProvider\r\n            .structure('12', {\r\n                rows: [{\r\n                    columns: [{\r\n                        styleClass: 'col-md-12'\r\n                    }]\r\n                }]\r\n            })\r\n            .structure('6-6', {\r\n                rows: [{\r\n                    columns: [{\r\n                        styleClass: 'col-md-6'\r\n                    }, {\r\n                        styleClass: 'col-md-6'\r\n                    }]\r\n                }]\r\n            })\r\n            .structure('4-8', {\r\n                rows: [{\r\n                    columns: [{\r\n                        styleClass: 'col-md-4',\r\n                        widgets: []\r\n                    }, {\r\n                        styleClass: 'col-md-8',\r\n                        widgets: []\r\n                    }]\r\n                }]\r\n            })\r\n            .structure('12/4-4-4', {\r\n                rows: [{\r\n                    columns: [{\r\n                        styleClass: 'col-md-12'\r\n                    }]\r\n                }, {\r\n                    columns: [{\r\n                        styleClass: 'col-md-4'\r\n                    }, {\r\n                        styleClass: 'col-md-4'\r\n                    }, {\r\n                        styleClass: 'col-md-4'\r\n                    }]\r\n                }]\r\n            })\r\n            .structure('12/6-6', {\r\n                rows: [{\r\n                    columns: [{\r\n                        styleClass: 'col-md-12'\r\n                    }]\r\n                }, {\r\n                    columns: [{\r\n                        styleClass: 'col-md-6'\r\n                    }, {\r\n                        styleClass: 'col-md-6'\r\n                    }]\r\n                }]\r\n            })\r\n            .structure('12/6-6/12', {\r\n                rows: [{\r\n                    columns: [{\r\n                        styleClass: 'col-md-12'\r\n                    }]\r\n                }, {\r\n                    columns: [{\r\n                        styleClass: 'col-md-6'\r\n                    }, {\r\n                        styleClass: 'col-md-6'\r\n                    }]\r\n                }, {\r\n                    columns: [{\r\n                        styleClass: 'col-md-12'\r\n                    }]\r\n                }]\r\n            })\r\n            .structure('3-9 (12/4-4-4)', {\r\n                rows: [{\r\n                    columns: [{\r\n                        styleClass: 'col-md-3'\r\n                    }, {\r\n                        styleClass: 'col-md-9',\r\n                        rows: [{\r\n                            columns: [{\r\n                                styleClass: 'col-md-12'\r\n                            }]\r\n                        }, {\r\n                            columns: [{\r\n                                styleClass: 'col-md-4'\r\n                            }, {\r\n                                styleClass: 'col-md-4'\r\n                            },{\r\n                                styleClass: 'col-md-4'\r\n                            }]\r\n                        }]\r\n                    }]\r\n                }]\r\n            })\r\n            .structure('3-9 (12/6-6)', {\r\n                rows: [{\r\n                    columns: [{\r\n                        styleClass: 'col-md-3'\r\n                    }, {\r\n                        styleClass: 'col-md-9',\r\n                        rows: [{\r\n                            columns: [{\r\n                                styleClass: 'col-md-12'\r\n                            }]\r\n                        }, {\r\n                            columns: [{\r\n                                styleClass: 'col-md-6'\r\n                            }, {\r\n                                styleClass: 'col-md-6'\r\n                            }]\r\n                        }]\r\n                    }]\r\n                }]\r\n            });\r\n\r\n    });\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register structures and widgets.\n */\nangular.module('adf.provider', ['adf.locale'])\n  .provider('dashboard', function(adfLocale){\n\n    var widgets = {};\n    var widgetsPath = '';\n    var structures = {};\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\n    var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\">loading ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n    var customWidgetTemplatePath = null;\n\n    // default apply function of widget.edit.apply\n    var defaultApplyFunction = function(){\n      return true;\n    };\n\n    var activeLocale = adfLocale.defaultLocale;\n    var locales = adfLocale.frameworkLocales;\n\n    function getLocales() {\n      return locales;\n    }\n\n    function getActiveLocale() {\n      return activeLocale;\n    }\n\n    function translate(label) {\n      var translation = locales[activeLocale][label];\n      return translation ? translation : label;\n    }\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#widget\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new widget.\n    *\n    * @param {string} name of the widget\n    * @param {object} widget to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `title` - `{string=}` - The title of the widget.\n    *   - `description` - `{string=}` - Description of the widget.\n    *   - `category` - `{string=}` - Category of the widget.\n    *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\n    *   - `config` - `{object}` - Predefined widget configuration.\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\n    *      associated with newly created scope of the widget or the name of a\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n    *      if passed as a string.\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\n    *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\n    *   - `template` - `{string=|function()=}` - html template as a string.\n    *   - `templateUrl` - `{string=}` - path to an html template.\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the widget\n    *      will wait for them all to be resolved or one to be rejected before the controller is\n    *      instantiated.\n    *      If all the promises are resolved successfully, the values of the resolved promises are\n    *      injected.\n    *\n    *      The map object is:\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n    *        and the return value is treated as the dependency. If the result is a promise, it is\n    *        resolved before its value is injected into the controller.\n    *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n    *      on the scope of the widget.\n    *   - `edit` - `{object}` - Edit modus of the widget.\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n    *        on the scope of the widget.\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n    *        Default is true.\n    *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\n    *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\n    *        The function have to return a boolean or an promise which can be resolved to a boolean.\n    *        The function can use injection.\n    *\n    * @returns {Object} self\n    */\n    this.widget = function(name, widget){\n      var w = angular.extend({reload: false, frameless: false}, widget);\n      if ( w.edit ){\n        var edit = {\n          reload: true,\n          immediate: false,\n          apply: defaultApplyFunction\n        };\n        angular.extend(edit, w.edit);\n        w.edit = edit;\n      }\n      widgets[name] = w;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#widgetsPath\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Sets the path to the directory which contains the widgets. The widgets\n     * path is used for widgets with a templateUrl which contains the\n     * placeholder {widgetsPath}. The placeholder is replaced with the\n     * configured value, before the template is loaded, but the template is\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n     * The default value of widgetPaths is ''.\n     *\n     *\n     * @param {string} path to the directory which contains the widgets\n     *\n     * @returns {Object} self\n     */\n    this.widgetsPath = function(path){\n      widgetsPath = path;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#structure\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new structure.\n    *\n    * @param {string} name of the structure\n    * @param {object} structure to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\n    *     - `styleClass` - `{string}` - CSS Class of the row.\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\n    *       - `styleClass` - `{string}` - CSS Class of the column.\n    *\n    * @returns {Object} self\n    */\n    this.structure = function(name, structure){\n      structures[name] = structure;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#messageTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template for messages.\n    *\n    * @param {string} template for messages.\n    *\n    * @returns {Object} self\n    */\n    this.messageTemplate = function(template){\n      messageTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#loadingTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template which is displayed as\n    * long as the widget resources are not resolved.\n    *\n    * @param {string} template loading template\n    *\n    * @returns {Object} self\n    */\n    this.loadingTemplate = function(template){\n      loadingTemplate = template;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#customWidgetTemplatePath\n     * @propertyOf adf.dashboardProvider\n     * @description\n     *\n     * Changes the container template for the widgets\n     *\n     * @param {string} path to the custom widget template\n     *\n     * @returns {Object} self\n     */\n    this.customWidgetTemplatePath = function(templatePath) {\n      customWidgetTemplatePath = templatePath;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#setLocale\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Changes the locale setting of adf\n     *\n     * @param {string} ISO Language Code\n     *\n     * @returns {Object} self\n     */\n     this.setLocale = function(locale){\n       if(locales[locale]) {\n         activeLocale = locale;\n       } else {\n         throw new Error('Cannot set locale: ' + locale + '. Locale is not defined.');\n       }\n       return this;\n     };\n\n     /**\n      * @ngdoc method\n      * @name adf.dashboardProvider#addLocale\n      * @methodOf adf.dashboardProvider\n      * @description\n      *\n      * Adds a new locale to adf\n      *\n      * @param {string} ISO Language Code for the new locale\n      * @param {object} translations for the locale.\n      *\n      * @returns {Object} self\n      */\n      this.addLocale = function(locale, translations){\n        if(!angular.isString(locale)) {\n          throw new Error('locale must be an string');\n        }\n\n        if(!angular.isObject(translations)) {\n          throw new Error('translations must be an object');\n        }\n\n        locales[locale] = translations;\n        return this;\n      };\n\n   /**\n    * @ngdoc service\n    * @name adf.dashboard\n    * @description\n    *\n    * The dashboard holds all options, structures and widgets.\n    *\n    * @property {Array.<Object>} widgets Array of registered widgets.\n    * @property {string} widgetsPath Default path for widgets.\n    * @property {Array.<Object>} structures Array of registered structures.\n    * @property {string} messageTemplate Template for messages.\n    * @property {string} loadingTemplate Template for widget loading.\n    * @property {method} sets locale of adf.\n    * @property {Array.<Object>} hold all of the locale translations.\n    * @property {string} the active locale setting.\n    * @property {method} translation function passed to templates.\n    *\n    * @returns {Object} self\n    */\n    this.$get = function(){\n      var cid = 0;\n\n      return {\n        widgets: widgets,\n        widgetsPath: widgetsPath,\n        structures: structures,\n        messageTemplate: messageTemplate,\n        loadingTemplate: loadingTemplate,\n        setLocale: this.setLocale,\n        locales: getLocales,\n        activeLocale: getActiveLocale,\n        translate: translate,\n        customWidgetTemplatePath: customWidgetTemplatePath,\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#id\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Creates an ongoing numeric id. The method is used to create ids for\n         * columns and widgets in the dashboard.\n         */\n        id: function(){\n          return new Date().getTime() + '-' + (++cid);\n        },\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#idEqual\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Checks if the given ids are equal.\n         *\n         * @param {string} id widget or column id\n         * @param {string} other widget or column id\n         */\n         idEquals: function(id, other){\n           // use toString, because old ids are numbers\n           return ((id) && (other)) && (id.toString() === other.toString());\n         }\n      };\n    };\n\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf.locale', [])\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n\n/**\n* @ngdoc object\n* @name adf.locale#adfLocale\n* @description\n*\n* Holds settings and values for framework supported locales\n*/\nangular.module('adf.locale')\n.constant('adfLocale',\n  {\n    defaultLocale: 'pt-BR',\n    frameworkLocales: {\n      'en-GB': {\n        ADF_COMMON_CLOSE: 'Close',\n        ADF_COMMON_DELETE: 'Delete',\n        ADF_COMMON_TITLE: 'Title',\n        ADF_COMMON_CANCEL: 'Cancel',\n        ADF_COMMON_APPLY: 'Apply',\n        ADF_COMMON_EDIT_DASHBOARD: 'Edit dashboard',\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Structure',\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Add new widget',\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Save changes',\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Enable edit mode',\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Undo changes',\n        ADF_WIDGET_ADD_HEADER: 'Add new widget',\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Are you sure you want to delete this widget ?',\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Reload widget Content',\n        ADF_WIDGET_TOOLTIP_MOVE: 'Change widget location',\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Collapse widget',\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Expand widget',\n        ADF_WIDGET_TOOLTIP_EDIT: 'Edit widget configuration',\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Fullscreen widget',\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Remove widget'\n      },\n      'pt-BR': {\n        ADF_COMMON_CLOSE: 'Fechar',\n        ADF_COMMON_DELETE: 'Delete',\n        ADF_COMMON_TITLE: 'Título',\n        ADF_COMMON_CANCEL: 'Cancelar',\n        ADF_COMMON_APPLY: 'Aplicar',\n        ADF_COMMON_EDIT_DASHBOARD: 'Editar Dashboard',\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Estrutura',\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Adicionar Widget',\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Salvar Alterções',\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Ativar Edição',\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Desfazer Alterações',\n        ADF_WIDGET_ADD_HEADER: 'Adicionar Widget',\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Tem certeza que deseja remover este Widget?',\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Recarregar',\n        ADF_WIDGET_TOOLTIP_MOVE: 'Mover Widget',\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Minimizar Widget',\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Maximizar Widget',\n        ADF_WIDGET_TOOLTIP_EDIT: 'Editar Configurações do Widget',\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Tela Cheia',\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Remover Widget'\n      }\n    }\n  }\n);\n\n})(window);"]}